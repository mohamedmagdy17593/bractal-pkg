{"remainingRequest":"/home/muhammad-magdi/projects/bractal-pkg/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/preset-env\",{\"targets\":[\"last 2 versions\",\"not dead\",\"not < 2%\",\"not ie 11\"],\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/home/muhammad-magdi/projects/bractal-pkg/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-optional-chaining\",\"@babel/plugin-proposal-class-properties\",[\"module-resolver\",{\"alias\":{\"~\":\"./src\"}}],[\"emotion\",{\"autoLabel\":true}],[\"/home/muhammad-magdi/projects/bractal-pkg/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/home/muhammad-magdi/projects/bractal-pkg/node_modules/react-hot-loader/babel.js\"],\"exclude\":\"node_modules/**\",\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js","dependencies":[{"path":"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js","mtime":1550058344761},{"path":"/home/muhammad-magdi/projects/bractal-pkg/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/muhammad-magdi/projects/bractal-pkg/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport React from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport _styled from '@emotion/styled-base';\nimport _ from 'lodash';\nimport cuid from 'cuid';\nimport 'color';\nimport { css } from '@emotion/core';\nimport changeCase from 'change-case';\nimport { withMedia } from 'react-media-query-hoc-with-context';\nimport PropTypes from 'prop-types';\nvar Theme = {\n  new: {\n    inputs: {\n      focusBorderColor: {\n        primary: '#0065b3',\n        secondary: '#e28203'\n      },\n      placeholderColor: 'rgba(0,0,0,0.22)'\n    },\n    colors: {\n      buttons: {\n        primary: {\n          background: '#33a8ff',\n          backgroundinverted: '#FFFFFF',\n          line: '#FFFFFF',\n          lineInverted: '#33a8ff'\n        },\n        secondary: {\n          background: '#fb9410',\n          backgroundinverted: '#FFFFFF',\n          line: '#FFFFFF',\n          lineInverted: '#fb9410'\n        },\n        passive: {\n          background: '#e5e5e5',\n          backgroundinverted: '#FFFFFF',\n          line: 'rgba(0, 0, 0, 0.7)',\n          lineInverted: '#aaaaaa'\n        },\n        disabled: {\n          background: '#aaaaaa',\n          backgroundinverted: '#FFFFFF',\n          line: '#FFFFFF',\n          lineInverted: '#aaaaaa'\n        },\n        error: {\n          background: '#d32f2f',\n          backgroundinverted: '#FFFFFF',\n          line: '#FFFFFF',\n          lineInverted: '#d32f2f'\n        }\n      },\n      labels: {\n        normal: {\n          primary: '#33a8ff',\n          secondary: '#fb9410',\n          important: '#000000',\n          emphasized: 'rgba(0, 0, 0, 0.7)',\n          normal: 'rgba(0, 0, 0, 0.5)',\n          subtle: 'rgba(0, 0, 0, 0.35)',\n          hint: 'rgba(0, 0, 0, 0.22)',\n          error: '#d32f2f'\n        },\n        inverted: {\n          primary: 'white',\n          secondary: 'white',\n          important: 'white',\n          emphasized: 'rgba(255, 255, 255, 0.7)',\n          normal: 'rgba(255, 255, 255, 0.5)',\n          subtle: 'rgba(255, 255, 255, 0.4)',\n          hint: 'rgba(255, 255, 255, 0.3)',\n          error: 'red'\n        },\n        borders: {\n          normal: {\n            hint: 'rgba(0,0,0,0.05)',\n            subtle: 'rgba(0,0,0,0.1)',\n            normal: 'rgba(0,0,0,0.3)',\n            dark: 'rgba(0,0,0,0.5)',\n            important: 'black'\n          },\n          inverted: {\n            important: 'white',\n            normal: 'rgba(255, 255, 255, 0.7)',\n            subtle: 'rgba(255, 255, 255, 0.5)',\n            hint: 'rgba(255, 255, 255, 0.3)'\n          }\n        }\n      },\n      backgrounds: {\n        background: '#fdfdfd',\n        darkBackground: '#dcdcdc',\n        panelHeader: '#f2f2f2',\n        panel: '#f9f9f9',\n        lightPanelHeader: '#e5e5e5'\n      },\n      named: {\n        primary: '#33a8ff',\n        secondary: '#fb9410',\n        error: '#d32f2f',\n        info: '#5c9ec0',\n        success: '#7CB342',\n        warning: '#FFB300',\n        default: '#708090',\n        inverted: '#FFFFFF',\n        foreGround: '#FFFFFF'\n      }\n    },\n    spacer: 10,\n    fonts: {\n      sizes: {\n        header: 36,\n        xxl: 25,\n        xl: 20,\n        lg: 18,\n        md: 16,\n        sm: 14,\n        xs: 12,\n        xxs: 10\n      },\n      weights: {\n        extraBold: 900,\n        bold: 700,\n        semiBold: 600,\n        regular: 400,\n        light: 300,\n        normal: 'normal'\n      }\n    },\n    borders: {\n      size: {\n        thin: 1,\n        normal: 2,\n        bold: 3\n      },\n      color: {\n        extraLight: 'rgba(0,0,0,0.05)',\n        light: 'rgba(0,0,0,0.1)',\n        normal: 'rgba(0,0,0,0.3)',\n        dark: 'rgba(0,0,0,0.5)',\n        lightGray: '#e5e5e5'\n      },\n      radius: {\n        sm: 3,\n        md: 5,\n        lg: 10,\n        xl: 18,\n        xxl: 21\n      }\n    }\n  },\n  colors: {\n    primary: '#33a8ff',\n    primaryHover: '#1e97f0',\n    primaryClicked: '#0a7bcd',\n    primaryDark: '#2c8bd2',\n    secondary: '#fb9410',\n    secondaryHover: '#f08a07',\n    secondaryClicked: '#e5870f',\n    secondaryDark: '#cc790e',\n    error: '#D32f2f',\n    success: 'green',\n    cellHoverColor: 'rgba(48, 157, 224, 0.1)',\n    cellHoverColorAlt: 'rgba(48, 157, 224, 0.2)',\n    link: '#fb9410',\n    backgroundColor: '#f9f9f9',\n    icon: '#7f7f7f',\n    labels: {\n      important: '#000000',\n      normal: 'rgba(0, 0, 0, 0.5)',\n      emphasized: 'rgba(0, 0, 0, 0.7)',\n      subtle: 'rgba(0, 0, 0, 0.35)',\n      hint: 'rgba(0, 0, 0, 0.22)'\n    },\n    invertedLabels: {\n      important: 'white',\n      normal: 'rgba(255, 255, 255, 0.7)',\n      subtle: 'rgba(255, 255, 255, 0.5)',\n      hint: 'rgba(255, 255, 255, 0.3)'\n    },\n    named: {\n      white: '#FFFFFF',\n      grey: 'rgba(229, 229, 229, 0.7)',\n      extraLightGrey: '#fbfbfa'\n    }\n  },\n  fonts: {\n    sizes: {\n      xxxLarge: 48,\n      xxLarge: 36,\n      xLarge: 25,\n      large: 18,\n      medium: 16,\n      small: 14,\n      xSmall: 12,\n      xxSmall: 11,\n      xxxSmall: 9.5\n    },\n    weights: {\n      extraBold: 900,\n      bold: 700,\n      semiBold: 600,\n      regular: 400,\n      normal: 'normal'\n    }\n  },\n  paddings: {\n    xxSmall: 1,\n    xSmall: 2,\n    small: 5,\n    normal: 7,\n    medium: 10,\n    large: 15,\n    xLarge: 20,\n    xxLarge: 25,\n    xxxLarge: 30,\n    xxxxLarge: 35,\n    xxxxxLarge: 40\n  },\n  borders: {\n    size: {\n      thin: 1,\n      normal: 2,\n      bold: 3\n    },\n    color: {\n      extraLight: 'rgba(0,0,0,0.05)',\n      light: 'rgba(0,0,0,0.1)',\n      normal: 'rgba(0,0,0,0.3)',\n      dark: 'rgba(0,0,0,0.5)',\n      lightGray: '#e5e5e5'\n    },\n    radius: {\n      small: 3,\n      normal: 5,\n      large: 10,\n      xLarge: 18,\n      xxLarge: 21\n    }\n  },\n  inputs: {\n    radius: 25,\n    fontSize: 14,\n    placeholderColor: 'rgba(0,0,0,0.22)',\n    borderColor: 'rgba(0,0,0,0.22)',\n    borderColorActive: '#33a8ff',\n    color: 'rgba(0, 0, 0)',\n    padding: {\n      top: 12,\n      bottom: 12,\n      left: 15,\n      right: 15\n    },\n    borderWidth: 1\n  },\n  buttons: {\n    radius: 5,\n    fontSize: 16,\n    padding: 12,\n    border: 1,\n    // Only applicable in the inverted state\n    disabled: {\n      backgroundColor: {\n        normal: '#999999',\n        inverted: '#cccccc'\n      }\n    }\n  }\n};\nvar defaultTheme = Theme;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/* eslint-disable function-paren-newline */\n\n\nvar generateMissingKeys = function generateMissingKeys(element) {\n  return element.props.key ? element : React.cloneElement(element, {\n    key: cuid()\n  });\n};\n\nvar injectElementBetweenChildElements = function injectElementBetweenChildElements(items, separator, generateKeysIfNeeded) {\n  if (!separator) {\n    return items;\n  }\n\n  if (!items) {\n    return [];\n  } else if (items.length === 0 || !_.isArray(items)) {\n    return [items];\n  }\n\n  var elementItems = items.filter(function (element) {\n    return _.isArray(element) && element.length > 0 || React.isValidElement(element) || _.isString(element) && element.trim().length > 0;\n  });\n  elementItems = _.flatten(elementItems);\n\n  var keyedSeparator = function keyedSeparator() {\n    return generateKeysIfNeeded ? generateMissingKeys(separator) : separator;\n  };\n\n  var itemsWithExtraSeparator = _toConsumableArray(_.flatten(elementItems.map(function (item) {\n    return item ? [item, keyedSeparator()] : null;\n  })));\n\n  return itemsWithExtraSeparator.slice(0, itemsWithExtraSeparator.length - 1);\n};\n\nfunction assert(condition, message) {\n  if (!condition) {\n    var errorMessage = message || 'Assertion failed';\n\n    if (typeof Error !== 'undefined') {\n      throw new Error(errorMessage);\n    }\n\n    throw errorMessage; // Fallback\n  }\n}\n\nvar generateSequenceFromTo = function generateSequenceFromTo(from, to) {\n  return from < to ? _toConsumableArray(Array(to - from).keys()).map(function (i) {\n    return i + from;\n  }) : _toConsumableArray(Array(from - to).keys()).map(function (i) {\n    return from - i;\n  });\n};\n\nvar SIZE_PROP_NAMES = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl', 'header'];\n\nvar boxModesColors = function boxModesColors(type, theme) {\n  return {\n    normal: {\n      lineColor: theme.new.colors.named.inverted,\n      borderColor: theme.new.colors.named.inverted,\n      backgroundColor: theme.new.colors.named[type]\n    },\n    inverted: {\n      lineColor: theme.new.colors.named[type],\n      borderColor: theme.new.colors.named[type],\n      backgroundColor: theme.new.colors.panels.background\n    }\n  };\n};\n\nvar infereControlMode = function infereControlMode(props) {\n  if (props.inverted) {\n    return 'inverted';\n  }\n\n  return 'normal';\n};\n\nvar infereBoxColors = function infereBoxColors(props) {\n  if (props.colors) {\n    return props.colors;\n  }\n\n  if (!props.boxType || !props.theme.new.colors.named[props.boxType]) {\n    return {};\n  }\n\n  var type = props.boxType;\n  var mode = infereControlMode(props);\n  return boxModesColors(type, props.theme)[mode];\n};\n\nvar boxColorsStyles = function boxColorsStyles(props) {\n  return (\n    /*#__PURE__*/\n\n    /*#__PURE__*/\n    css(\"color:\", props.color || infereBoxColors(props).lineColor, \";border-color:\", props.borderColor || infereBoxColors(props).borderColor, \";background-color:\", props.backgroundColor || infereBoxColors(props).backgroundColor, \";label:boxColorsStyles;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), \"label:boxColorsStyles;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"))\n  );\n};\n\nvar getNamedFontSize = function getNamedFontSize(size) {\n  return SIZE_PROP_NAMES.find(function (sizeProp) {\n    return size === sizeProp;\n  });\n};\n\nvar infereSize = function infereSize(props) {\n  return getNamedFontSize(props.size) || SIZE_PROP_NAMES.find(function (sizeProp) {\n    return props[sizeProp];\n  });\n};\n\nvar infereSpaceSize = function infereSpaceSize(props, size) {\n  if (_.isNumber(size)) {\n    return \"\".concat(size * props.theme.new.spacer, \"px\");\n  } else if (size && parseFloat(size.toString()) === size) {\n    return \"\".concat(parseFloat(size.toString()) * props.theme.new.spacer, \"px\");\n  }\n\n  return size;\n};\n\nvar responsiveJSQueries = function responsiveJSQueries(media) {\n  return [media.xsmall, media.minMobile, media.minTablet, media.minDesktop, media.largeDesktop];\n};\n\nvar responsiveStyle = function responsiveStyle(props, targetProp, callBack, defaultValue) {\n  var propValue = null;\n\n  if (targetProp === 'size') {\n    if (props.size) {\n      propValue = props.size;\n    } else {\n      propValue = infereSize(props) || 'md';\n    }\n  } else {\n    propValue = props[targetProp];\n  }\n\n  if (!propValue) {\n    if (defaultValue) {\n      return callBack(defaultValue);\n    }\n\n    return null;\n  }\n\n  if (_.isArray(propValue) && propValue.length >= 2) {\n    assert(props.media, \"Media isn't found. Make sure to surround with withMedia\");\n    var currentSizeIndex = generateSequenceFromTo(4, -1).find(function (i) {\n      return responsiveJSQueries(props.media)[i] && i < propValue.length;\n    });\n\n    if (!currentSizeIndex && currentSizeIndex !== 0) {\n      return '';\n    }\n\n    return callBack(propValue[currentSizeIndex]);\n  }\n\n  return _.isArray(propValue) && propValue.length === 1 ? callBack(propValue[0]) : callBack(propValue);\n};\n\nvar styleAliases = [['width', 'w'], ['height', 'h'], ['minWidth'], ['minHeight'], ['maxWidth'], ['maxHeight'], ['padding', 'p'], ['paddingTop', 'pt'], ['paddingBottom', 'pb'], ['paddingLeft', 'pl'], ['paddingRight', 'pr'], ['margin', 'm'], ['marginTop', 'mt'], ['marginBottom', 'mb'], ['marginLeft', 'ml'], ['marginRight', 'mr']];\n\nvar styleExists = function styleExists(props, style) {\n  return style.some(function (styleName) {\n    return props[styleName];\n  });\n};\n\nvar getSize = function getSize(props, size) {\n  if (_.isNumber(size)) {\n    return \"\".concat(size * props.theme.new.spacer, \"px\");\n  } else if (size && parseFloat(size).toString() === size) {\n    return \"\".concat(parseFloat(size.toString()) * props.theme.new.spacer, \"px\");\n  }\n\n  return size;\n};\n\nvar spaceStyles = function spaceStyles(props) {\n  return (\n    /*#__PURE__*/\n\n    /*#__PURE__*/\n    css(_.flatten(styleAliases.filter(function (aliasGroup) {\n      return styleExists(props, aliasGroup);\n    }).map(function (aliasGroup) {\n      var styleName = aliasGroup[0];\n      return aliasGroup.map(function (styleAlias) {\n        return props[styleAlias] && responsiveStyle(props, styleAlias, function (size) {\n          return (\n            /*#__PURE__*/\n\n            /*#__PURE__*/\n            css(changeCase.paramCase(styleName), \":\", getSize(props, size), \";\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlU3lzdGVtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlDb0QiLCJmaWxlIjoic3R5bGVTeXN0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IHJlc3BvbnNpdmVTdHlsZSB9IGZyb20gJ34vY29yZVVJL3V0aWxzL2luZmVyZVN0eWxlJztcbmltcG9ydCBjaGFuZ2VDYXNlIGZyb20gJ2NoYW5nZS1jYXNlJztcblxuY29uc3Qgc3R5bGVBbGlhc2VzID0gW1xuICBbJ3dpZHRoJywgJ3cnXSxcbiAgWydoZWlnaHQnLCAnaCddLFxuICBbJ21pbldpZHRoJ10sXG4gIFsnbWluSGVpZ2h0J10sXG4gIFsnbWF4V2lkdGgnXSxcbiAgWydtYXhIZWlnaHQnXSxcbiAgWydwYWRkaW5nJywgJ3AnXSxcbiAgWydwYWRkaW5nVG9wJywgJ3B0J10sXG4gIFsncGFkZGluZ0JvdHRvbScsICdwYiddLFxuICBbJ3BhZGRpbmdMZWZ0JywgJ3BsJ10sXG4gIFsncGFkZGluZ1JpZ2h0JywgJ3ByJ10sXG4gIFsnbWFyZ2luJywgJ20nXSxcbiAgWydtYXJnaW5Ub3AnLCAnbXQnXSxcbiAgWydtYXJnaW5Cb3R0b20nLCAnbWInXSxcbiAgWydtYXJnaW5MZWZ0JywgJ21sJ10sXG4gIFsnbWFyZ2luUmlnaHQnLCAnbXInXSxcbl07XG5cbmNvbnN0IHN0eWxlRXhpc3RzID0gKHByb3BzLCBzdHlsZSkgPT5cbiAgc3R5bGUuc29tZShzdHlsZU5hbWUgPT4gcHJvcHNbc3R5bGVOYW1lXSk7XG5cbmV4cG9ydCBjb25zdCBnZXRTaXplID0gKHByb3BzLCBzaXplKSA9PiB7XG4gIGlmIChfLmlzTnVtYmVyKHNpemUpKSB7XG4gICAgcmV0dXJuIGAke3NpemUgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyfXB4YDtcbiAgfSBlbHNlIGlmIChzaXplICYmIHBhcnNlRmxvYXQoc2l6ZSkudG9TdHJpbmcoKSA9PT0gc2l6ZSkge1xuICAgIHJldHVybiBgJHtwYXJzZUZsb2F0KHNpemUudG9TdHJpbmcoKSkgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyfXB4YDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb3BzID0+IGNzc2BcbiAgJHtfLmZsYXR0ZW4oc3R5bGVBbGlhc2VzLmZpbHRlcihhbGlhc0dyb3VwID0+IHN0eWxlRXhpc3RzKHByb3BzLCBhbGlhc0dyb3VwKSkubWFwKChhbGlhc0dyb3VwKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVOYW1lID0gYWxpYXNHcm91cFswXTtcbiAgICByZXR1cm4gYWxpYXNHcm91cC5tYXAoc3R5bGVBbGlhcyA9PiBwcm9wc1tzdHlsZUFsaWFzXSAmJlxuICAgICAgcmVzcG9uc2l2ZVN0eWxlKHByb3BzLCBzdHlsZUFsaWFzLCBzaXplID0+IGNzc2BcbiAgICAgICAgJHtjaGFuZ2VDYXNlLnBhcmFtQ2FzZShzdHlsZU5hbWUpfTogJHtnZXRTaXplKHByb3BzLCBzaXplKX07XG4gICAgICBgKSk7XG4gIH0pKX07XG4gIGA7XG4iXX0= */\"), \"label:spaceStyles;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"))\n          );\n        });\n      });\n    })), \";\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlU3lzdGVtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDMkIiLCJmaWxlIjoic3R5bGVTeXN0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IHJlc3BvbnNpdmVTdHlsZSB9IGZyb20gJ34vY29yZVVJL3V0aWxzL2luZmVyZVN0eWxlJztcbmltcG9ydCBjaGFuZ2VDYXNlIGZyb20gJ2NoYW5nZS1jYXNlJztcblxuY29uc3Qgc3R5bGVBbGlhc2VzID0gW1xuICBbJ3dpZHRoJywgJ3cnXSxcbiAgWydoZWlnaHQnLCAnaCddLFxuICBbJ21pbldpZHRoJ10sXG4gIFsnbWluSGVpZ2h0J10sXG4gIFsnbWF4V2lkdGgnXSxcbiAgWydtYXhIZWlnaHQnXSxcbiAgWydwYWRkaW5nJywgJ3AnXSxcbiAgWydwYWRkaW5nVG9wJywgJ3B0J10sXG4gIFsncGFkZGluZ0JvdHRvbScsICdwYiddLFxuICBbJ3BhZGRpbmdMZWZ0JywgJ3BsJ10sXG4gIFsncGFkZGluZ1JpZ2h0JywgJ3ByJ10sXG4gIFsnbWFyZ2luJywgJ20nXSxcbiAgWydtYXJnaW5Ub3AnLCAnbXQnXSxcbiAgWydtYXJnaW5Cb3R0b20nLCAnbWInXSxcbiAgWydtYXJnaW5MZWZ0JywgJ21sJ10sXG4gIFsnbWFyZ2luUmlnaHQnLCAnbXInXSxcbl07XG5cbmNvbnN0IHN0eWxlRXhpc3RzID0gKHByb3BzLCBzdHlsZSkgPT5cbiAgc3R5bGUuc29tZShzdHlsZU5hbWUgPT4gcHJvcHNbc3R5bGVOYW1lXSk7XG5cbmV4cG9ydCBjb25zdCBnZXRTaXplID0gKHByb3BzLCBzaXplKSA9PiB7XG4gIGlmIChfLmlzTnVtYmVyKHNpemUpKSB7XG4gICAgcmV0dXJuIGAke3NpemUgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyfXB4YDtcbiAgfSBlbHNlIGlmIChzaXplICYmIHBhcnNlRmxvYXQoc2l6ZSkudG9TdHJpbmcoKSA9PT0gc2l6ZSkge1xuICAgIHJldHVybiBgJHtwYXJzZUZsb2F0KHNpemUudG9TdHJpbmcoKSkgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyfXB4YDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb3BzID0+IGNzc2BcbiAgJHtfLmZsYXR0ZW4oc3R5bGVBbGlhc2VzLmZpbHRlcihhbGlhc0dyb3VwID0+IHN0eWxlRXhpc3RzKHByb3BzLCBhbGlhc0dyb3VwKSkubWFwKChhbGlhc0dyb3VwKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVOYW1lID0gYWxpYXNHcm91cFswXTtcbiAgICByZXR1cm4gYWxpYXNHcm91cC5tYXAoc3R5bGVBbGlhcyA9PiBwcm9wc1tzdHlsZUFsaWFzXSAmJlxuICAgICAgcmVzcG9uc2l2ZVN0eWxlKHByb3BzLCBzdHlsZUFsaWFzLCBzaXplID0+IGNzc2BcbiAgICAgICAgJHtjaGFuZ2VDYXNlLnBhcmFtQ2FzZShzdHlsZU5hbWUpfTogJHtnZXRTaXplKHByb3BzLCBzaXplKX07XG4gICAgICBgKSk7XG4gIH0pKX07XG4gIGA7XG4iXX0= */\"), \"label:spaceStyles;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"))\n  );\n};\n\nvar ForceMediaContext = React.createContext();\nvar patchTargets = {\n  xsmall: ['minXsamll', 'xsmall', 'maxMobile', 'maxTablet', 'maxDesktop', 'maxLargeDesktop'],\n  mobile: ['minXsmall', 'minMobile', 'mobile', 'maxMobile', 'maxTablet', 'maxDesktop', 'maxLargeDesktop'],\n  tablet: ['minXsmall', 'minMobile', 'minTablet', 'tablet', 'maxTablet', 'maxDesktop', 'maxLargeDesktop'],\n  desktop: ['minXsmall', 'minMobile', 'minTablet', 'minDesktop', 'desktop', 'maxDesktop', 'maxLargeDesktop'],\n  largeDesktop: ['minXsmall', 'minMobile', 'minTablet', 'minDesktop', 'largeDesktop', 'maxLargeDesktop']\n};\n\nvar withMedia$1 = function withMedia$1(WrappedComponent) {\n  return withMedia(function (props) {\n    return React.createElement(ForceMediaContext.Consumer, null, function (forceMediaQuery) {\n      var patchedMedia = props.media;\n\n      if (forceMediaQuery) {\n        patchedMedia = _.mapValues(props.media, function (mediaQueryMatched, mediaQueryName) {\n          return patchTargets[forceMediaQuery].includes(mediaQueryName);\n        });\n      }\n\n      return React.createElement(WrappedComponent, _extends({}, props, {\n        media: patchedMedia,\n        forceMediaQuery: forceMediaQuery\n      }), props.children);\n    });\n  });\n};\n\nvar StyledSpacer = _styled(\"div\", {\n  target: \"e56c2770\",\n  label: \"StyledSpacer\"\n})(\"flex-grow:\", function (props) {\n  return props.grow ? 1 : null;\n}, \";\", function (props) {\n  return responsiveStyle(props, 'size', function (size) {\n    return (\n      /*#__PURE__*/\n\n      /*#__PURE__*/\n      css(\"min-width:\", infereSpaceSize(props, size), \";min-height:\", infereSpaceSize(props, size), \";label:StyledSpacer;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwYWNlci5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV3VEIiwiZmlsZSI6IlNwYWNlci5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcmVzcG9uc2l2ZVN0eWxlLCBpbmZlcmVTcGFjZVNpemUgfSBmcm9tICd+L2NvcmVVSS91dGlscy9pbmZlcmVTdHlsZSc7XG5cbmltcG9ydCBzcGFjZVN0eWxlcyBmcm9tICd+L2NvcmVVSS91dGlscy9zdHlsZVN5c3RlbSc7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRTcGFjZXIgPSBzdHlsZWQuZGl2YFxuICBmbGV4LWdyb3c6ICR7cHJvcHMgPT4gKHByb3BzLmdyb3cgPyAxIDogbnVsbCl9O1xuICBcbiAgJHtwcm9wcyA9PiByZXNwb25zaXZlU3R5bGUocHJvcHMsICdzaXplJywgc2l6ZSA9PiBjc3NgXG4gICAgbWluLXdpZHRoOiAke2luZmVyZVNwYWNlU2l6ZShwcm9wcywgc2l6ZSl9O1xuICAgIG1pbi1oZWlnaHQ6ICR7aW5mZXJlU3BhY2VTaXplKHByb3BzLCBzaXplKX07XG4gIGApfTtcblxuICAke3Byb3BzID0+IHNwYWNlU3R5bGVzKHByb3BzKX1cbmA7XG5cbmNvbnN0IFNwYWNlciA9IHByb3BzID0+IDxTdHlsZWRTcGFjZXIgey4uLnByb3BzfSAvPjtcblxuU3BhY2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogMSxcbn07XG5cblNwYWNlci5wcm9wVHlwZXMgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLFxufSkuaXNSZXF1aXJlZDtcblxuZXhwb3J0IGRlZmF1bHQgU3BhY2VyO1xuXG5leHBvcnQgY29uc3QgSFNwYWNlciA9IHByb3BzID0+IChcbiAgPFNwYWNlciBtaW5IZWlnaHQ9XCIxcHhcIiB7Li4ucHJvcHN9IC8+XG4pO1xuXG5leHBvcnQgY29uc3QgVlNwYWNlciA9IHByb3BzID0+IChcbiAgPFNwYWNlciBtaW5XaWR0aD1cIjFweFwiIHsuLi5wcm9wc30gLz5cbik7XG4iXX0= */\"), \"label:StyledSpacer;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211aGFtbWFkLW1hZ2RpL3Byb2plY3RzL2JyYWN0YWwtcGtnL2Rpc3QvbWFpbi5lcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtZEEiLCJmaWxlIjoiL2hvbWUvbXVoYW1tYWQtbWFnZGkvcHJvamVjdHMvYnJhY3RhbC1wa2cvZGlzdC9tYWluLmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICdlbW90aW9uLXRoZW1pbmcnO1xuaW1wb3J0IF9zdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkLWJhc2UnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjdWlkIGZyb20gJ2N1aWQnO1xuaW1wb3J0ICdjb2xvcic7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBjaGFuZ2VDYXNlIGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCB7IHdpdGhNZWRpYSB9IGZyb20gJ3JlYWN0LW1lZGlhLXF1ZXJ5LWhvYy13aXRoLWNvbnRleHQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgVGhlbWUgPSB7XG4gIG5ldzoge1xuICAgIGlucHV0czoge1xuICAgICAgZm9jdXNCb3JkZXJDb2xvcjoge1xuICAgICAgICBwcmltYXJ5OiAnIzAwNjViMycsXG4gICAgICAgIHNlY29uZGFyeTogJyNlMjgyMDMnXG4gICAgICB9LFxuICAgICAgcGxhY2Vob2xkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMC4yMiknXG4gICAgfSxcbiAgICBjb2xvcnM6IHtcbiAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgcHJpbWFyeToge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICcjMzNhOGZmJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kaW52ZXJ0ZWQ6ICcjRkZGRkZGJyxcbiAgICAgICAgICBsaW5lOiAnI0ZGRkZGRicsXG4gICAgICAgICAgbGluZUludmVydGVkOiAnIzMzYThmZidcbiAgICAgICAgfSxcbiAgICAgICAgc2Vjb25kYXJ5OiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogJyNmYjk0MTAnLFxuICAgICAgICAgIGJhY2tncm91bmRpbnZlcnRlZDogJyNGRkZGRkYnLFxuICAgICAgICAgIGxpbmU6ICcjRkZGRkZGJyxcbiAgICAgICAgICBsaW5lSW52ZXJ0ZWQ6ICcjZmI5NDEwJ1xuICAgICAgICB9LFxuICAgICAgICBwYXNzaXZlOiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogJyNlNWU1ZTUnLFxuICAgICAgICAgIGJhY2tncm91bmRpbnZlcnRlZDogJyNGRkZGRkYnLFxuICAgICAgICAgIGxpbmU6ICdyZ2JhKDAsIDAsIDAsIDAuNyknLFxuICAgICAgICAgIGxpbmVJbnZlcnRlZDogJyNhYWFhYWEnXG4gICAgICAgIH0sXG4gICAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogJyNhYWFhYWEnLFxuICAgICAgICAgIGJhY2tncm91bmRpbnZlcnRlZDogJyNGRkZGRkYnLFxuICAgICAgICAgIGxpbmU6ICcjRkZGRkZGJyxcbiAgICAgICAgICBsaW5lSW52ZXJ0ZWQ6ICcjYWFhYWFhJ1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICcjZDMyZjJmJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kaW52ZXJ0ZWQ6ICcjRkZGRkZGJyxcbiAgICAgICAgICBsaW5lOiAnI0ZGRkZGRicsXG4gICAgICAgICAgbGluZUludmVydGVkOiAnI2QzMmYyZidcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICBwcmltYXJ5OiAnIzMzYThmZicsXG4gICAgICAgICAgc2Vjb25kYXJ5OiAnI2ZiOTQxMCcsXG4gICAgICAgICAgaW1wb3J0YW50OiAnIzAwMDAwMCcsXG4gICAgICAgICAgZW1waGFzaXplZDogJ3JnYmEoMCwgMCwgMCwgMC43KScsXG4gICAgICAgICAgbm9ybWFsOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICAgICAgICBzdWJ0bGU6ICdyZ2JhKDAsIDAsIDAsIDAuMzUpJyxcbiAgICAgICAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjIyKScsXG4gICAgICAgICAgZXJyb3I6ICcjZDMyZjJmJ1xuICAgICAgICB9LFxuICAgICAgICBpbnZlcnRlZDoge1xuICAgICAgICAgIHByaW1hcnk6ICd3aGl0ZScsXG4gICAgICAgICAgc2Vjb25kYXJ5OiAnd2hpdGUnLFxuICAgICAgICAgIGltcG9ydGFudDogJ3doaXRlJyxcbiAgICAgICAgICBlbXBoYXNpemVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICAgICAgICBub3JtYWw6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgICAgICAgIHN1YnRsZTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC40KScsXG4gICAgICAgICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgICAgICAgZXJyb3I6ICdyZWQnXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlcnM6IHtcbiAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgIGhpbnQ6ICdyZ2JhKDAsMCwwLDAuMDUpJyxcbiAgICAgICAgICAgIHN1YnRsZTogJ3JnYmEoMCwwLDAsMC4xKScsXG4gICAgICAgICAgICBub3JtYWw6ICdyZ2JhKDAsMCwwLDAuMyknLFxuICAgICAgICAgICAgZGFyazogJ3JnYmEoMCwwLDAsMC41KScsXG4gICAgICAgICAgICBpbXBvcnRhbnQ6ICdibGFjaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludmVydGVkOiB7XG4gICAgICAgICAgICBpbXBvcnRhbnQ6ICd3aGl0ZScsXG4gICAgICAgICAgICBub3JtYWw6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgICAgICAgICAgc3VidGxlOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICAgICAgICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmFja2dyb3VuZHM6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZGZkZmQnLFxuICAgICAgICBkYXJrQmFja2dyb3VuZDogJyNkY2RjZGMnLFxuICAgICAgICBwYW5lbEhlYWRlcjogJyNmMmYyZjInLFxuICAgICAgICBwYW5lbDogJyNmOWY5ZjknLFxuICAgICAgICBsaWdodFBhbmVsSGVhZGVyOiAnI2U1ZTVlNSdcbiAgICAgIH0sXG4gICAgICBuYW1lZDoge1xuICAgICAgICBwcmltYXJ5OiAnIzMzYThmZicsXG4gICAgICAgIHNlY29uZGFyeTogJyNmYjk0MTAnLFxuICAgICAgICBlcnJvcjogJyNkMzJmMmYnLFxuICAgICAgICBpbmZvOiAnIzVjOWVjMCcsXG4gICAgICAgIHN1Y2Nlc3M6ICcjN0NCMzQyJyxcbiAgICAgICAgd2FybmluZzogJyNGRkIzMDAnLFxuICAgICAgICBkZWZhdWx0OiAnIzcwODA5MCcsXG4gICAgICAgIGludmVydGVkOiAnI0ZGRkZGRicsXG4gICAgICAgIGZvcmVHcm91bmQ6ICcjRkZGRkZGJ1xuICAgICAgfVxuICAgIH0sXG4gICAgc3BhY2VyOiAxMCxcbiAgICBmb250czoge1xuICAgICAgc2l6ZXM6IHtcbiAgICAgICAgaGVhZGVyOiAzNixcbiAgICAgICAgeHhsOiAyNSxcbiAgICAgICAgeGw6IDIwLFxuICAgICAgICBsZzogMTgsXG4gICAgICAgIG1kOiAxNixcbiAgICAgICAgc206IDE0LFxuICAgICAgICB4czogMTIsXG4gICAgICAgIHh4czogMTBcbiAgICAgIH0sXG4gICAgICB3ZWlnaHRzOiB7XG4gICAgICAgIGV4dHJhQm9sZDogOTAwLFxuICAgICAgICBib2xkOiA3MDAsXG4gICAgICAgIHNlbWlCb2xkOiA2MDAsXG4gICAgICAgIHJlZ3VsYXI6IDQwMCxcbiAgICAgICAgbGlnaHQ6IDMwMCxcbiAgICAgICAgbm9ybWFsOiAnbm9ybWFsJ1xuICAgICAgfVxuICAgIH0sXG4gICAgYm9yZGVyczoge1xuICAgICAgc2l6ZToge1xuICAgICAgICB0aGluOiAxLFxuICAgICAgICBub3JtYWw6IDIsXG4gICAgICAgIGJvbGQ6IDNcbiAgICAgIH0sXG4gICAgICBjb2xvcjoge1xuICAgICAgICBleHRyYUxpZ2h0OiAncmdiYSgwLDAsMCwwLjA1KScsXG4gICAgICAgIGxpZ2h0OiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgICAgICAgbm9ybWFsOiAncmdiYSgwLDAsMCwwLjMpJyxcbiAgICAgICAgZGFyazogJ3JnYmEoMCwwLDAsMC41KScsXG4gICAgICAgIGxpZ2h0R3JheTogJyNlNWU1ZTUnXG4gICAgICB9LFxuICAgICAgcmFkaXVzOiB7XG4gICAgICAgIHNtOiAzLFxuICAgICAgICBtZDogNSxcbiAgICAgICAgbGc6IDEwLFxuICAgICAgICB4bDogMTgsXG4gICAgICAgIHh4bDogMjFcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNvbG9yczoge1xuICAgIHByaW1hcnk6ICcjMzNhOGZmJyxcbiAgICBwcmltYXJ5SG92ZXI6ICcjMWU5N2YwJyxcbiAgICBwcmltYXJ5Q2xpY2tlZDogJyMwYTdiY2QnLFxuICAgIHByaW1hcnlEYXJrOiAnIzJjOGJkMicsXG4gICAgc2Vjb25kYXJ5OiAnI2ZiOTQxMCcsXG4gICAgc2Vjb25kYXJ5SG92ZXI6ICcjZjA4YTA3JyxcbiAgICBzZWNvbmRhcnlDbGlja2VkOiAnI2U1ODcwZicsXG4gICAgc2Vjb25kYXJ5RGFyazogJyNjYzc5MGUnLFxuICAgIGVycm9yOiAnI0QzMmYyZicsXG4gICAgc3VjY2VzczogJ2dyZWVuJyxcbiAgICBjZWxsSG92ZXJDb2xvcjogJ3JnYmEoNDgsIDE1NywgMjI0LCAwLjEpJyxcbiAgICBjZWxsSG92ZXJDb2xvckFsdDogJ3JnYmEoNDgsIDE1NywgMjI0LCAwLjIpJyxcbiAgICBsaW5rOiAnI2ZiOTQxMCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2Y5ZjlmOScsXG4gICAgaWNvbjogJyM3ZjdmN2YnLFxuICAgIGxhYmVsczoge1xuICAgICAgaW1wb3J0YW50OiAnIzAwMDAwMCcsXG4gICAgICBub3JtYWw6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgICAgZW1waGFzaXplZDogJ3JnYmEoMCwgMCwgMCwgMC43KScsXG4gICAgICBzdWJ0bGU6ICdyZ2JhKDAsIDAsIDAsIDAuMzUpJyxcbiAgICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjIpJ1xuICAgIH0sXG4gICAgaW52ZXJ0ZWRMYWJlbHM6IHtcbiAgICAgIGltcG9ydGFudDogJ3doaXRlJyxcbiAgICAgIG5vcm1hbDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgICBzdWJ0bGU6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKSdcbiAgICB9LFxuICAgIG5hbWVkOiB7XG4gICAgICB3aGl0ZTogJyNGRkZGRkYnLFxuICAgICAgZ3JleTogJ3JnYmEoMjI5LCAyMjksIDIyOSwgMC43KScsXG4gICAgICBleHRyYUxpZ2h0R3JleTogJyNmYmZiZmEnXG4gICAgfVxuICB9LFxuICBmb250czoge1xuICAgIHNpemVzOiB7XG4gICAgICB4eHhMYXJnZTogNDgsXG4gICAgICB4eExhcmdlOiAzNixcbiAgICAgIHhMYXJnZTogMjUsXG4gICAgICBsYXJnZTogMTgsXG4gICAgICBtZWRpdW06IDE2LFxuICAgICAgc21hbGw6IDE0LFxuICAgICAgeFNtYWxsOiAxMixcbiAgICAgIHh4U21hbGw6IDExLFxuICAgICAgeHh4U21hbGw6IDkuNVxuICAgIH0sXG4gICAgd2VpZ2h0czoge1xuICAgICAgZXh0cmFCb2xkOiA5MDAsXG4gICAgICBib2xkOiA3MDAsXG4gICAgICBzZW1pQm9sZDogNjAwLFxuICAgICAgcmVndWxhcjogNDAwLFxuICAgICAgbm9ybWFsOiAnbm9ybWFsJ1xuICAgIH1cbiAgfSxcbiAgcGFkZGluZ3M6IHtcbiAgICB4eFNtYWxsOiAxLFxuICAgIHhTbWFsbDogMixcbiAgICBzbWFsbDogNSxcbiAgICBub3JtYWw6IDcsXG4gICAgbWVkaXVtOiAxMCxcbiAgICBsYXJnZTogMTUsXG4gICAgeExhcmdlOiAyMCxcbiAgICB4eExhcmdlOiAyNSxcbiAgICB4eHhMYXJnZTogMzAsXG4gICAgeHh4eExhcmdlOiAzNSxcbiAgICB4eHh4eExhcmdlOiA0MFxuICB9LFxuICBib3JkZXJzOiB7XG4gICAgc2l6ZToge1xuICAgICAgdGhpbjogMSxcbiAgICAgIG5vcm1hbDogMixcbiAgICAgIGJvbGQ6IDNcbiAgICB9LFxuICAgIGNvbG9yOiB7XG4gICAgICBleHRyYUxpZ2h0OiAncmdiYSgwLDAsMCwwLjA1KScsXG4gICAgICBsaWdodDogJ3JnYmEoMCwwLDAsMC4xKScsXG4gICAgICBub3JtYWw6ICdyZ2JhKDAsMCwwLDAuMyknLFxuICAgICAgZGFyazogJ3JnYmEoMCwwLDAsMC41KScsXG4gICAgICBsaWdodEdyYXk6ICcjZTVlNWU1J1xuICAgIH0sXG4gICAgcmFkaXVzOiB7XG4gICAgICBzbWFsbDogMyxcbiAgICAgIG5vcm1hbDogNSxcbiAgICAgIGxhcmdlOiAxMCxcbiAgICAgIHhMYXJnZTogMTgsXG4gICAgICB4eExhcmdlOiAyMVxuICAgIH1cbiAgfSxcbiAgaW5wdXRzOiB7XG4gICAgcmFkaXVzOiAyNSxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgcGxhY2Vob2xkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMC4yMiknLFxuICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwLjIyKScsXG4gICAgYm9yZGVyQ29sb3JBY3RpdmU6ICcjMzNhOGZmJyxcbiAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCknLFxuICAgIHBhZGRpbmc6IHtcbiAgICAgIHRvcDogMTIsXG4gICAgICBib3R0b206IDEyLFxuICAgICAgbGVmdDogMTUsXG4gICAgICByaWdodDogMTVcbiAgICB9LFxuICAgIGJvcmRlcldpZHRoOiAxXG4gIH0sXG4gIGJ1dHRvbnM6IHtcbiAgICByYWRpdXM6IDUsXG4gICAgZm9udFNpemU6IDE2LFxuICAgIHBhZGRpbmc6IDEyLFxuICAgIGJvcmRlcjogMSxcbiAgICAvLyBPbmx5IGFwcGxpY2FibGUgaW4gdGhlIGludmVydGVkIHN0YXRlXG4gICAgZGlzYWJsZWQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjoge1xuICAgICAgICBub3JtYWw6ICcjOTk5OTk5JyxcbiAgICAgICAgaW52ZXJ0ZWQ6ICcjY2NjY2NjJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbnZhciBkZWZhdWx0VGhlbWUgPSBUaGVtZTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgZnVuY3Rpb24tcGFyZW4tbmV3bGluZSAqL1xuXG5jb25zdCBnZW5lcmF0ZU1pc3NpbmdLZXlzID0gZWxlbWVudCA9PiBlbGVtZW50LnByb3BzLmtleSA/IGVsZW1lbnQgOiBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICBrZXk6IGN1aWQoKVxufSk7XG5cbnZhciBpbmplY3RFbGVtZW50QmV0d2VlbkNoaWxkRWxlbWVudHMgPSAoKGl0ZW1zLCBzZXBhcmF0b3IsIGdlbmVyYXRlS2V5c0lmTmVlZGVkKSA9PiB7XG4gIGlmICghc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG5cbiAgaWYgKCFpdGVtcykge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIGlmIChpdGVtcy5sZW5ndGggPT09IDAgfHwgIV8uaXNBcnJheShpdGVtcykpIHtcbiAgICByZXR1cm4gW2l0ZW1zXTtcbiAgfVxuXG4gIGxldCBlbGVtZW50SXRlbXMgPSBpdGVtcy5maWx0ZXIoZWxlbWVudCA9PiBfLmlzQXJyYXkoZWxlbWVudCkgJiYgZWxlbWVudC5sZW5ndGggPiAwIHx8IFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpIHx8IF8uaXNTdHJpbmcoZWxlbWVudCkgJiYgZWxlbWVudC50cmltKCkubGVuZ3RoID4gMCk7XG4gIGVsZW1lbnRJdGVtcyA9IF8uZmxhdHRlbihlbGVtZW50SXRlbXMpO1xuXG4gIGNvbnN0IGtleWVkU2VwYXJhdG9yID0gKCkgPT4gZ2VuZXJhdGVLZXlzSWZOZWVkZWQgPyBnZW5lcmF0ZU1pc3NpbmdLZXlzKHNlcGFyYXRvcikgOiBzZXBhcmF0b3I7XG5cbiAgY29uc3QgaXRlbXNXaXRoRXh0cmFTZXBhcmF0b3IgPSBbLi4uXy5mbGF0dGVuKGVsZW1lbnRJdGVtcy5tYXAoaXRlbSA9PiBpdGVtID8gW2l0ZW0sIGtleWVkU2VwYXJhdG9yKCldIDogbnVsbCkpXTtcbiAgcmV0dXJuIGl0ZW1zV2l0aEV4dHJhU2VwYXJhdG9yLnNsaWNlKDAsIGl0ZW1zV2l0aEV4dHJhU2VwYXJhdG9yLmxlbmd0aCAtIDEpO1xufSk7XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdBc3NlcnRpb24gZmFpbGVkJztcblxuICAgIGlmICh0eXBlb2YgRXJyb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvck1lc3NhZ2U7IC8vIEZhbGxiYWNrXG4gIH1cbn1cblxuY29uc3QgZ2VuZXJhdGVTZXF1ZW5jZUZyb21UbyA9IChmcm9tLCB0bykgPT4gZnJvbSA8IHRvID8gWy4uLkFycmF5KHRvIC0gZnJvbSkua2V5cygpXS5tYXAoaSA9PiBpICsgZnJvbSkgOiBbLi4uQXJyYXkoZnJvbSAtIHRvKS5rZXlzKCldLm1hcChpID0+IGZyb20gLSBpKTtcblxuY29uc3QgU0laRV9QUk9QX05BTUVTID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsICd4eGwnLCAnaGVhZGVyJ107XG5cbmNvbnN0IGJveE1vZGVzQ29sb3JzID0gKHR5cGUsIHRoZW1lKSA9PiAoe1xuICBub3JtYWw6IHtcbiAgICBsaW5lQ29sb3I6IHRoZW1lLm5ldy5jb2xvcnMubmFtZWQuaW52ZXJ0ZWQsXG4gICAgYm9yZGVyQ29sb3I6IHRoZW1lLm5ldy5jb2xvcnMubmFtZWQuaW52ZXJ0ZWQsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5uZXcuY29sb3JzLm5hbWVkW3R5cGVdXG4gIH0sXG4gIGludmVydGVkOiB7XG4gICAgbGluZUNvbG9yOiB0aGVtZS5uZXcuY29sb3JzLm5hbWVkW3R5cGVdLFxuICAgIGJvcmRlckNvbG9yOiB0aGVtZS5uZXcuY29sb3JzLm5hbWVkW3R5cGVdLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUubmV3LmNvbG9ycy5wYW5lbHMuYmFja2dyb3VuZFxuICB9XG59KTtcbmNvbnN0IGluZmVyZUNvbnRyb2xNb2RlID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuaW52ZXJ0ZWQpIHtcbiAgICByZXR1cm4gJ2ludmVydGVkJztcbiAgfVxuXG4gIHJldHVybiAnbm9ybWFsJztcbn07XG5cbmNvbnN0IGluZmVyZUJveENvbG9ycyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmNvbG9ycykge1xuICAgIHJldHVybiBwcm9wcy5jb2xvcnM7XG4gIH1cblxuICBpZiAoIXByb3BzLmJveFR5cGUgfHwgIXByb3BzLnRoZW1lLm5ldy5jb2xvcnMubmFtZWRbcHJvcHMuYm94VHlwZV0pIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCB0eXBlID0gcHJvcHMuYm94VHlwZTtcbiAgY29uc3QgbW9kZSA9IGluZmVyZUNvbnRyb2xNb2RlKHByb3BzKTtcbiAgcmV0dXJuIGJveE1vZGVzQ29sb3JzKHR5cGUsIHByb3BzLnRoZW1lKVttb2RlXTtcbn07XG5cbmNvbnN0IGJveENvbG9yc1N0eWxlcyA9IHByb3BzID0+XG4vKiNfX1BVUkVfXyovXG5jc3MoXCJjb2xvcjpcIiwgcHJvcHMuY29sb3IgfHwgaW5mZXJlQm94Q29sb3JzKHByb3BzKS5saW5lQ29sb3IsIFwiO2JvcmRlci1jb2xvcjpcIiwgcHJvcHMuYm9yZGVyQ29sb3IgfHwgaW5mZXJlQm94Q29sb3JzKHByb3BzKS5ib3JkZXJDb2xvciwgXCI7YmFja2dyb3VuZC1jb2xvcjpcIiwgcHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IGluZmVyZUJveENvbG9ycyhwcm9wcykuYmFja2dyb3VuZENvbG9yLCBcIjtsYWJlbDpib3hDb2xvcnNTdHlsZXM7XCIgKyAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gXCJcIiA6IFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVptVnlaVk4wZVd4bExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRU3RHTWtNaUxDSm1hV3hsSWpvaWFXNW1aWEpsVTNSNWJHVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUTI5c2IzSWdabkp2YlNBblkyOXNiM0luWEc1cGJYQnZjblFnZTJOemMzMGdabkp2YlNBblFHVnRiM1JwYjI0dlkyOXlaU2RjYm1sdGNHOXlkQ0JmSUdaeWIyMGdKMnh2WkdGemFDZGNibHh1YVcxd2IzSjBJR0Z6YzJWeWRDQm1jbTl0SUNkK0wyTnZjbVV2ZFhScGJITXZhbk5JWld4d1pYSnpMMkZ6YzJWeWRDZGNibHh1YVcxd2IzSjBJR2RsYm1WeVlYUmxVMlZ4ZFdWdVkyVkdjbTl0Vkc4Z1puSnZiU0FuZmk5amIzSmxMM1YwYVd4ekwycHpTR1ZzY0dWeWN5OW5aVzVsY21GMFpWTmxjWFZsYm1ObEoxeHVYRzVqYjI1emRDQlRTVnBGWDFCU1QxQmZUa0ZOUlZNZ1BTQmJKM2h6Snl3Z0ozTnRKeXdnSjIxa0p5d2dKMnhuSnl3Z0ozaHNKeXdnSjNoNGJDY3NJQ2RvWldGa1pYSW5YVnh1WEc1amIyNXpkQ0JHVDA1VVgwTlBURTlTVXlBOUlGdGNiaUFnSjNCeWFXMWhjbmtuTEZ4dUlDQW5jMlZqYjI1a1lYSjVKeXhjYmlBZ0oybHRjRzl5ZEdGdWRDY3NYRzRnSUNkdWIzSnRZV3duTEZ4dUlDQW5aVzF3YUdGemFYcGxaQ2NzWEc0Z0lDZHpkV0owYkdVbkxGeHVJQ0FuYUdsdWRDY3NYRzRnSUNkbGNuSnZjaWNzWEc1ZFhHNWNibU52Ym5OMElIUm9aVzFsVUhKdmNDQTlJSEJ5YjNCT1lXMWxJRDArSUhCeWIzQk9ZVzFsTG5KbGNHeGhZMlVvSjNOZkp5d2dKeWNwWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JrWVhKclpXNGdQU0FvWTI5c2IzSXNJSEpoZEdsdktTQTlQbHh1SUNCeVlYUnBieUErUFNBd1hHNGdJQ0FnUHlCRGIyeHZjaWhqYjJ4dmNpbGNiaUFnSUNBZ0lDQWdMbVJoY210bGJpaHlZWFJwYnlsY2JpQWdJQ0FnSUNBZ0xuTjBjbWx1WnlncFhHNGdJQ0FnT2lCRGIyeHZjaWhqYjJ4dmNpbGNiaUFnSUNBZ0lDQWdMbXhwWjJoMFpXNG9MVEVnS2lCeVlYUnBieWxjYmlBZ0lDQWdJQ0FnTG5OMGNtbHVaeWdwWEc1Y2JtTnZibk4wSUcxdlpHVnpRMjlzYjNKeklEMGdLSFI1Y0dVc0lIUm9aVzFsTENCd2NtOXdjeWtnUFQ0Z2UxeHVJQ0JqYjI1emRDQmpiMnh2Y25NZ1BTQjBhR1Z0WlM1dVpYY3VZMjlzYjNKekxtSjFkSFJ2Ym5OYmRIbHdaVjFjYmx4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUc1dmNtMWhiRG9nZTF4dUlDQWdJQ0FnYkdsdVpVTnZiRzl5T2lCamIyeHZjbk11YkdsdVpTeGNiaUFnSUNBZ0lHSnZjbVJsY2tOdmJHOXlPaUJ3Y205d2N5NW1iM0pqWlVsdWRtVnlkR1ZrUW05eVpHVnlJRDhnWTI5c2IzSnpMbXhwYm1VZ09pQmpiMnh2Y25NdVltRmphMmR5YjNWdVpDeGNiaUFnSUNBZ0lHSmhZMnRuY205MWJtUkRiMnh2Y2pvZ1kyOXNiM0p6TG1KaFkydG5jbTkxYm1Rc1hHNGdJQ0FnZlN4Y2JpQWdJQ0JwYm5abGNuUmxaRG9nZTF4dUlDQWdJQ0FnYkdsdVpVTnZiRzl5T2lCamIyeHZjbk11YkdsdVpVbHVkbVZ5ZEdWa0xGeHVJQ0FnSUNBZ1ltOXlaR1Z5UTI5c2IzSTZJSEJ5YjNCekxtWnZjbU5sU1c1MlpYSjBaV1JDYjNKa1pYSmNiaUFnSUNBZ0lDQWdQeUJqYjJ4dmNuTXVZbUZqYTJkeWIzVnVaR2x1ZG1WeWRHVmtYRzRnSUNBZ0lDQWdJRG9nWTI5c2IzSnpMbXhwYm1WSmJuWmxjblJsWkN4Y2JpQWdJQ0FnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nWTI5c2IzSnpMbUpoWTJ0bmNtOTFibVJwYm5abGNuUmxaQ3hjYmlBZ0lDQjlMRnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQmliM2hOYjJSbGMwTnZiRzl5Y3lBOUlDaDBlWEJsTENCMGFHVnRaU2tnUFQ0Z0tIdGNiaUFnYm05eWJXRnNPaUI3WEc0Z0lDQWdiR2x1WlVOdmJHOXlPaUIwYUdWdFpTNXVaWGN1WTI5c2IzSnpMbTVoYldWa0xtbHVkbVZ5ZEdWa0xGeHVJQ0FnSUdKdmNtUmxja052Ykc5eU9pQjBhR1Z0WlM1dVpYY3VZMjlzYjNKekxtNWhiV1ZrTG1sdWRtVnlkR1ZrTEZ4dUlDQWdJR0poWTJ0bmNtOTFibVJEYjJ4dmNqb2dkR2hsYldVdWJtVjNMbU52Ykc5eWN5NXVZVzFsWkZ0MGVYQmxYU3hjYmlBZ2ZTeGNiaUFnYVc1MlpYSjBaV1E2SUh0Y2JpQWdJQ0JzYVc1bFEyOXNiM0k2SUhSb1pXMWxMbTVsZHk1amIyeHZjbk11Ym1GdFpXUmJkSGx3WlYwc1hHNGdJQ0FnWW05eVpHVnlRMjlzYjNJNklIUm9aVzFsTG01bGR5NWpiMnh2Y25NdWJtRnRaV1JiZEhsd1pWMHNYRzRnSUNBZ1ltRmphMmR5YjNWdVpFTnZiRzl5T2lCMGFHVnRaUzV1WlhjdVkyOXNiM0p6TG5CaGJtVnNjeTVpWVdOclozSnZkVzVrTEZ4dUlDQjlMRnh1ZlNsY2JseHVaWGh3YjNKMElHTnZibk4wSUdsdVptVnlaVU52Ym5SeWIyeFVlWEJsSUQwZ2NISnZjSE1nUFQ0Z2UxeHVJQ0JwWmlBb2NISnZjSE11WkdsellXSnNaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMlJwYzJGaWJHVmtKMXh1SUNCOUlHVnNjMlVnYVdZZ0tIQnliM0J6TG5CaGMzTnBkbVVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKM0JoYzNOcGRtVW5YRzRnSUgwZ1pXeHpaU0JwWmlBb2NISnZjSE11YzJWamIyNWtZWEo1S1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2R6WldOdmJtUmhjbmtuWEc0Z0lIMWNiaUFnY21WMGRYSnVJQ2R3Y21sdFlYSjVKMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVc1bVpYSmxRMjl1ZEhKdmJFMXZaR1VnUFNCd2NtOXdjeUE5UGlCN1hHNGdJR2xtSUNod2NtOXdjeTVwYm5abGNuUmxaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5hVzUyWlhKMFpXUW5YRzRnSUgxY2JpQWdjbVYwZFhKdUlDZHViM0p0WVd3blhHNTlYRzVjYm1OdmJuTjBJR2x1Wm1WeVpVSnZlRU52Ykc5eWN5QTlJSEJ5YjNCeklEMCtJSHRjYmlBZ2FXWWdLSEJ5YjNCekxtTnZiRzl5Y3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3Y205d2N5NWpiMnh2Y25OY2JpQWdmVnh1SUNCcFppQW9JWEJ5YjNCekxtSnZlRlI1Y0dVZ2ZId2dJWEJ5YjNCekxuUm9aVzFsTG01bGR5NWpiMnh2Y25NdWJtRnRaV1JiY0hKdmNITXVZbTk0Vkhsd1pWMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2UzMWNiaUFnZlZ4dUlDQmpiMjV6ZENCMGVYQmxJRDBnY0hKdmNITXVZbTk0Vkhsd1pWeHVJQ0JqYjI1emRDQnRiMlJsSUQwZ2FXNW1aWEpsUTI5dWRISnZiRTF2WkdVb2NISnZjSE1wWEc1Y2JpQWdjbVYwZFhKdUlHSnZlRTF2WkdWelEyOXNiM0p6S0hSNWNHVXNJSEJ5YjNCekxuUm9aVzFsS1Z0dGIyUmxYVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWW05NFEyOXNiM0p6VTNSNWJHVnpJRDBnY0hKdmNITWdQVDRnWTNOellGeHVJQ0JqYjJ4dmNqb2dKSHR3Y205d2N5NWpiMnh2Y2lCOGZDQnBibVpsY21WQ2IzaERiMnh2Y25Nb2NISnZjSE1wTG14cGJtVkRiMnh2Y24wN1hHNGdJR0p2Y21SbGNpMWpiMnh2Y2pvZ0pIdHdjbTl3Y3k1aWIzSmtaWEpEYjJ4dmNpQjhmQ0JwYm1abGNtVkNiM2hEYjJ4dmNuTW9jSEp2Y0hNcExtSnZjbVJsY2tOdmJHOXlmVHRjYmlBZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ0pIdHdjbTl3Y3k1aVlXTnJaM0p2ZFc1a1EyOXNiM0lnZkh4Y2JpQWdJQ0JwYm1abGNtVkNiM2hEYjJ4dmNuTW9jSEp2Y0hNcExtSmhZMnRuY205MWJtUkRiMnh2Y24wN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnBibVpsY21WQ2RYUjBiMjVEYjJ4dmNuTWdQU0J3Y205d2N5QTlQaUI3WEc0Z0lHTnZibk4wSUhSNWNHVWdQU0JwYm1abGNtVkRiMjUwY205c1ZIbHdaU2h3Y205d2N5bGNiaUFnWTI5dWMzUWdiVzlrWlNBOUlHbHVabVZ5WlVOdmJuUnliMnhOYjJSbEtIQnliM0J6S1Z4dVhHNGdJSEpsZEhWeWJpQndjbTl3Y3k1amIyeHZjbk1nZkh3Z2JXOWtaWE5EYjJ4dmNuTW9kSGx3WlN3Z2NISnZjSE11ZEdobGJXVXNJSEJ5YjNCektWdHRiMlJsWFZ4dWZWeHVYRzVqYjI1emRDQmpiMnh2Y25NZ1BTQW9hVzVtWlhKbFpFTnZiRzl5Y3l3Z1pHRnlhMUpoZEdsdktTQTlQaUFvZTF4dUlDQmpiMnh2Y2pvZ1pHRnlhMlZ1S0dsdVptVnlaV1JEYjJ4dmNuTXViR2x1WlVOdmJHOXlMQ0JrWVhKclVtRjBhVzhwTEZ4dUlDQmlZV05yWjNKdmRXNWtRMjlzYjNJNklHUmhjbXRsYmlocGJtWmxjbVZrUTI5c2IzSnpMbUpoWTJ0bmNtOTFibVJEYjJ4dmNpd2daR0Z5YTFKaGRHbHZLU3hjYmlBZ1ltOXlaR1Z5UTI5c2IzSTZJR1JoY210bGJpaHBibVpsY21Wa1EyOXNiM0p6TG1KdmNtUmxja052Ykc5eUxDQmtZWEpyVW1GMGFXOHBMRnh1ZlNsY2JseHVaWGh3YjNKMElHTnZibk4wSUdOdmJHOXlVM1I1YkdWeklEMGdjSEp2Y0hNZ1BUNGdlMXh1SUNCamIyNXpkQ0JwYm1abGNtVmtRMjlzYjNKeklEMGdhVzVtWlhKbFFuVjBkRzl1UTI5c2IzSnpLSEJ5YjNCektWeHVJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lHTnZiRzl5Y3locGJtWmxjbVZrUTI5c2IzSnpMQ0F3S1N4Y2JpQWdJQ0I3WEc0Z0lDQWdJQ0FuSmpwb2IzWmxjaWM2SUdOdmJHOXljeWhwYm1abGNtVmtRMjlzYjNKekxDQXdMakExS1N4Y2JpQWdJQ0FnSUNjbU9tRmpkR2wyWlNjNklHTnZiRzl5Y3locGJtWmxjbVZrUTI5c2IzSnpMQ0F3TGpFcExGeHVJQ0FnSUNBZ0p5WTZabTlqZFhNbk9pQjdYRzRnSUNBZ0lDQWdJR0p2Y21SbGNrTnZiRzl5T2lCa1lYSnJaVzRvYVc1bVpYSmxRblYwZEc5dVEyOXNiM0p6S0hCeWIzQnpLUzVpYjNKa1pYSkRiMnh2Y2l3Z01DNHpLU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmU3hjYmlBZ1hWeHVJQ0F2THlCamMzTmdYRzRnSUM4dklDQWdKSHRqYjJ4dmNuTW9hVzVtWlhKbFpFTnZiRzl5Y3l3Z01DbDlYRzVjYmlBZ0x5OGdJQ0FtT21odmRtVnlJSHRjYmlBZ0x5OGdJQ0FnSUdOdmJHOXlPaUFrZTJSaGNtdGxiaWhwYm1abGNtVmtRMjlzYjNKekxteHBibVZEYjJ4dmNpd2dNQzR3TlNsOU8xeHVJQ0F2THlBZ0lDQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dKSHRrWVhKclpXNG9hVzVtWlhKbFpFTnZiRzl5Y3k1aVlXTnJaM0p2ZFc1a1EyOXNiM0lzSURBdU1EVXBmVHRjYmlBZ0x5OGdJQ0FnSUdKdmNtUmxjaTFqYjJ4dmNqb2dKSHRrWVhKclpXNG9hVzVtWlhKbFpFTnZiRzl5Y3k1aWIzSmtaWEpEYjJ4dmNpd2dNQzR3TlNsOU8xeHVJQ0F2THlBZ0lIMWNiaUFnTHk4Z1lDQjhmRnh1SUNBdkx5QmpjM05nWEc0Z0lDOHZJQ0FnSkh0amIyeHZjbk1vY0hKdmNITXNJREFwZlZ4dVhHNGdJQzh2SUNBZ0pqcG9iM1psY2lCN1hHNGdJQzh2SUNBZ0lDQWtlMk52Ykc5eWN5aHdjbTl3Y3l3Z01DNHdOU2w5WEc0Z0lDOHZJQ0FnZlZ4dUlDQXZMeUFnSUNZNllXTjBhWFpsSUh0Y2JpQWdMeThnSUNBZ0lDUjdZMjlzYjNKektIQnliM0J6TENBd0xqRXBmVnh1SUNBdkx5QWdJSDFjYmlBZ0x5OGdJQ0FtT21adlkzVnpJSHRjYmlBZ0x5OGdJQ0FnSUdKdmNtUmxjaTFqYjJ4dmNqb2dKSHRrWVhKclpXNG9hVzVtWlhKbFFuVjBkRzl1UTI5c2IzSnpLSEJ5YjNCektTNWliM0prWlhKRGIyeHZjaXdnTUM0ektYMDdYRzRnSUM4dklDQWdmVnh1SUNBdkx5QmdYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JrYVhOaFlteGxaRU52Ykc5eVUzUjViR1Z6SUQwZ2NISnZjSE1nUFQ0Z1kzTnpZRnh1SUNBa2UyTnZiRzl5Y3lod2NtOXdjeXdnTUNsOVhHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm5aWFJPWVcxbFpFWnZiblJUYVhwbElEMGdjMmw2WlNBOVBseHVJQ0JUU1ZwRlgxQlNUMUJmVGtGTlJWTXVabWx1WkNoemFYcGxVSEp2Y0NBOVBpQnphWHBsSUQwOVBTQnphWHBsVUhKdmNDbGNibHh1Wlhod2IzSjBJR052Ym5OMElHbHVabVZ5WlZOcGVtVWdQU0J3Y205d2N5QTlQbHh1SUNCblpYUk9ZVzFsWkVadmJuUlRhWHBsS0hCeWIzQnpMbk5wZW1VcElIeDhYRzRnSUZOSldrVmZVRkpQVUY5T1FVMUZVeTVtYVc1a0tITnBlbVZRY205d0lEMCtJSEJ5YjNCelczTnBlbVZRY205d1hTbGNibHh1Wlhod2IzSjBJR052Ym5OMElHbHVabVZ5WlZOd1lXTmxVMmw2WlNBOUlDaHdjbTl3Y3l3Z2MybDZaU2tnUFQ0Z2UxeHVJQ0JwWmlBb1h5NXBjMDUxYldKbGNpaHphWHBsS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJnSkh0emFYcGxJQ29nY0hKdmNITXVkR2hsYldVdWJtVjNMbk53WVdObGNuMXdlR0JjYmlBZ2ZTQmxiSE5sSUdsbUlDaHphWHBsSUNZbUlIQmhjbk5sUm14dllYUW9jMmw2WlM1MGIxTjBjbWx1WnlncEtTQTlQVDBnYzJsNlpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZ0pIdHdZWEp6WlVac2IyRjBLSE5wZW1VdWRHOVRkSEpwYm1jb0tTa2dLaUJ3Y205d2N5NTBhR1Z0WlM1dVpYY3VjM0JoWTJWeWZYQjRZRnh1SUNCOVhHNGdJSEpsZEhWeWJpQnphWHBsWEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCcGJtWmxjbVZHYjI1MFEyOXNiM0lnUFNBb2NISnZjSE1zSUdSbFptRjFiSFJEYjJ4dmNpa2dQVDRnZTF4dUlDQnNaWFFnWTI5c2IzSWdQU0J1ZFd4c1hHNGdJR2xtSUNod2NtOXdjeTVqYjJ4dmNpa2dlMXh1SUNBZ0lHTnZiRzl5SUQwZ1JrOU9WRjlEVDB4UFVsTXVabWx1WkNobWIyNTBRMjlzYjNJZ1BUNGdabTl1ZEVOdmJHOXlJRDA5UFNCd2NtOXdjeTVqYjJ4dmNpbGNiaUFnSUNCcFppQW9JV052Ykc5eUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZjSE11WTI5c2IzSmNiaUFnSUNCOVhHNGdJSDFjYmlBZ1kyOXNiM0lnUFZ4dUlDQWdJR052Ykc5eUlIeDhJRVpQVGxSZlEwOU1UMUpUTG1acGJtUW9abTl1ZEVOdmJHOXlJRDArSUhCeWIzQnpXMlp2Ym5SRGIyeHZjbDBwSUh4OElHUmxabUYxYkhSRGIyeHZjbHh1WEc0Z0lHTnZibk4wSUcxdlpHVWdQU0JwYm1abGNtVkRiMjUwY205c1RXOWtaU2h3Y205d2N5bGNibHh1SUNCeVpYUjFjbTRnY0hKdmNITXVkR2hsYldVdWJtVjNMbU52Ykc5eWN5NXNZV0psYkhOYmJXOWtaVjFiWTI5c2IzSmRYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1abGNtVkdiMjUwVTJsNlpTQTlJQ2h3Y205d2N5d2djMmw2WlNrZ1BUNGdlMXh1SUNCc1pYUWdhVzVtWlhKbFpGTnBlbVVnUFNCcGJtWmxjbVZUYVhwbEtIQnliM0J6S1Z4dUlDQmpiMjV6ZENCeVpXTmxhWFpsWkZOcGVtVWdQU0J6YVhwbElIeDhJSEJ5YjNCekxuTnBlbVZjYmx4dUlDQnBaaUFvSVhKbFkyVnBkbVZrVTJsNlpTQW1KaUFoYVc1bVpYSmxaRk5wZW1VcElIdGNiaUFnSUNCcGJtWmxjbVZrVTJsNlpTQTlJQ2R0WkNkY2JpQWdmVnh1WEc0Z0lHbG1JQ2hmTG1selRuVnRZbVZ5S0hKbFkyVnBkbVZrVTJsNlpTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1lDUjdjbVZqWldsMlpXUlRhWHBsSUNvZ2NISnZjSE11ZEdobGJXVXVibVYzTG5Od1lXTmxjbjF3ZUdCY2JpQWdmU0JsYkhObElHbG1JQ2hjYmlBZ0lDQnlaV05sYVhabFpGTnBlbVVnSmlaY2JpQWdJQ0J3WVhKelpVWnNiMkYwS0hKbFkyVnBkbVZrVTJsNlpTNTBiMU4wY21sdVp5Z3BLU0E5UFQwZ2NtVmpaV2wyWldSVGFYcGxYRzRnSUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJnSkh0d1lYSnpaVVpzYjJGMEtISmxZMlZwZG1Wa1UybDZaU2t1ZEc5VGRISnBibWNvS1NBcUlIQnliM0J6TG5Sb1pXMWxMbTVsZHk1emNHRmpaWEo5Y0hoZ1hHNGdJSDBnWld4elpTQnBaaUFvWjJWMFRtRnRaV1JHYjI1MFUybDZaU2h5WldObGFYWmxaRk5wZW1VcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdBa2UzQnliM0J6TG5Sb1pXMWxMbTVsZHk1bWIyNTBjeTV6YVhwbGMxdDBhR1Z0WlZCeWIzQW9jbVZqWldsMlpXUlRhWHBsS1YxOWNIaGdYRzRnSUgwZ1pXeHpaU0JwWmlBb2FXNW1aWEpsWkZOcGVtVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lDUjdjSEp2Y0hNdWRHaGxiV1V1Ym1WM0xtWnZiblJ6TG5OcGVtVnpXM1JvWlcxbFVISnZjQ2hwYm1abGNtVmtVMmw2WlNsZGZYQjRZRnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSEpsWTJWcGRtVmtVMmw2WlZ4dWZWeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2FXNW1aWEpsVG1GdFpXUkdiMjUwVTJsNlpTQTlJQ2h3Y205d2N5d2djMmw2WlNrZ1BUNGdlMXh1SUNCamIyNXpkQ0JwYm1abGNtVmtVMmw2WlNBOUlITnBlbVVnZkh3Z2FXNW1aWEpsVTJsNlpTaHdjbTl3Y3lrZ2ZId2dKMjFrSjF4dUlDQnlaWFIxY200Z2NISnZjSE11ZEdobGJXVXVibVYzTG1admJuUnpMbk5wZW1WelczUm9aVzFsVUhKdmNDaHBibVpsY21Wa1UybDZaU2xkSUh4OElHbHVabVZ5WldSVGFYcGxYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1abGNtVkdiMjUwVjJWcFoyaDBJRDBnY0hKdmNITWdQVDRnZTF4dUlDQnBaaUFvY0hKdmNITXVaWGgwY21GQ2IyeGtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnliM0J6TG5Sb1pXMWxMbTVsZHk1bWIyNTBjeTUzWldsbmFIUnpMbVY0ZEhKaFFtOXNaRnh1SUNCOUlHVnNjMlVnYVdZZ0tIQnliM0J6TG1KdmJHUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NISnZjSE11ZEdobGJXVXVibVYzTG1admJuUnpMbmRsYVdkb2RITXVZbTlzWkZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjNCekxuTmxiV2xDYjJ4a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIzQnpMblJvWlcxbExtNWxkeTVtYjI1MGN5NTNaV2xuYUhSekxuTmxiV2xDYjJ4a1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUc1MWJHd2dMeThnVG05eWJXRnNYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1abGNtVkNiM0prWlhKU1lXUnBkWE1nUFNBb2NISnZjSE1zSUhOcGVtVXBJRDArSUh0Y2JpQWdhV1lnS0hCeWIzQnpMbVoxYkd4U2IzVnVaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQXhNREF3WEc0Z0lIMGdaV3h6WlNCcFppQW9jSEp2Y0hNdWNtRmthWFZ6S1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJ5YjNCekxuSmhaR2wxYzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYVc1bVpYSmxaRk5wZW1VZ1BTQnBibVpsY21WT1lXMWxaRVp2Ym5SVGFYcGxLSEJ5YjNCekxDQnphWHBsS1Z4dUlDQnlaWFIxY200Z2FXNW1aWEpsWkZOcGVtVWdMeUF5TGpWY2JuMWNibHh1Wlhod2IzSjBJR052Ym5OMElHbHVabVZ5WlZCaFpHUnBibWRUYVhwbElEMGdLSEJ5YjNCekxDQnphWHBsS1NBOVBpQjdYRzRnSUdOdmJuTjBJR2x1Wm1WeVpXUlRhWHBsSUQwZ01DNDFNeUFxSUdsdVptVnlaVTVoYldWa1JtOXVkRk5wZW1Vb2NISnZjSE1zSUhOcGVtVXBYRzRnSUhKbGRIVnliaUJ3Y205d2N5NTBhV2RvZENBL0lHbHVabVZ5WldSVGFYcGxJQzhnTWlBNklHbHVabVZ5WldSVGFYcGxYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1abGNtVkpiblJ5WVZOd1lXTnBibWRUYVhwbElEMGdLSEJ5YjNCekxDQnphWHBsS1NBOVBpQjdYRzRnSUdOdmJuTjBJR2x1Wm1WeVpXUlRhWHBsSUQwZ01DNDFNeUFxSUdsdVptVnlaVTVoYldWa1JtOXVkRk5wZW1Vb2NISnZjSE1zSUhOcGVtVXBYRzRnSUhKbGRIVnliaUJ3Y205d2N5NTBhV2RvZENBL0lHbHVabVZ5WldSVGFYcGxJQzhnTWlBNklHbHVabVZ5WldSVGFYcGxYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0J3Y205d2MwWnZjbEJ5WldacGVDQTlJQ2h3Y205d2N5d2djSEpsWm1sNEtTQTlQbHh1SUNCZkxtMWhjRXRsZVhNb1hHNGdJQ0FnWHk1d2FXTnJRbmtvY0hKdmNITXNJQ2h3Y205d1ZtRnNkV1VzSUhCeWIzQk9ZVzFsS1NBOVBpQndjbTl3VG1GdFpTNXBibVJsZUU5bUtIQnlaV1pwZUNrZ1BUMDlJREFwTEZ4dUlDQWdJQ2gwY21sbloyVnlVSEp2Y0ZaaGJIVmxMQ0IwY21sbloyVnlVSEp2Y0V0bGVTa2dQVDRnZEhKcFoyZGxjbEJ5YjNCTFpYa3VjbVZ3YkdGalpTaHdjbVZtYVhnc0lDY25LU3hjYmlBZ0tWeHVYRzVqYjI1emRDQnlaWE53YjI1emFYWmxTbE5SZFdWeWFXVnpJRDBnYldWa2FXRWdQVDRnVzF4dUlDQnRaV1JwWVM1NGMyMWhiR3dzWEc0Z0lHMWxaR2xoTG0xcGJrMXZZbWxzWlN4Y2JpQWdiV1ZrYVdFdWJXbHVWR0ZpYkdWMExGeHVJQ0J0WldScFlTNXRhVzVFWlhOcmRHOXdMRnh1SUNCdFpXUnBZUzVzWVhKblpVUmxjMnQwYjNBc1hHNWRYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnlaWE53YjI1emFYWmxVM1I1YkdVZ1BTQW9jSEp2Y0hNc0lIUmhjbWRsZEZCeWIzQXNJR05oYkd4Q1lXTnJMQ0JrWldaaGRXeDBWbUZzZFdVcElEMCtJSHRjYmlBZ2JHVjBJSEJ5YjNCV1lXeDFaU0E5SUc1MWJHeGNiaUFnYVdZZ0tIUmhjbWRsZEZCeWIzQWdQVDA5SUNkemFYcGxKeWtnZTF4dUlDQWdJR2xtSUNod2NtOXdjeTV6YVhwbEtTQjdYRzRnSUNBZ0lDQndjbTl3Vm1Gc2RXVWdQU0J3Y205d2N5NXphWHBsWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIQnliM0JXWVd4MVpTQTlJR2x1Wm1WeVpWTnBlbVVvY0hKdmNITXBJSHg4SUNkdFpDZGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NISnZjRlpoYkhWbElEMGdjSEp2Y0hOYmRHRnlaMlYwVUhKdmNGMWNiaUFnZlZ4dVhHNGdJR2xtSUNnaGNISnZjRlpoYkhWbEtTQjdYRzRnSUNBZ2FXWWdLR1JsWm1GMWJIUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaGJHeENZV05yS0dSbFptRjFiSFJXWVd4MVpTbGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd4Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hmTG1selFYSnlZWGtvY0hKdmNGWmhiSFZsS1NBbUppQndjbTl3Vm1Gc2RXVXViR1Z1WjNSb0lENDlJRElwSUh0Y2JpQWdJQ0JoYzNObGNuUW9YRzRnSUNBZ0lDQndjbTl3Y3k1dFpXUnBZU3hjYmlBZ0lDQWdJRndpVFdWa2FXRWdhWE51SjNRZ1ptOTFibVF1SUUxaGEyVWdjM1Z5WlNCMGJ5QnpkWEp5YjNWdVpDQjNhWFJvSUhkcGRHaE5aV1JwWVZ3aUxGeHVJQ0FnSUNsY2JpQWdJQ0JqYjI1emRDQmpkWEp5Wlc1MFUybDZaVWx1WkdWNElEMGdaMlZ1WlhKaGRHVlRaWEYxWlc1alpVWnliMjFVYnlnMExDQXRNU2t1Wm1sdVpDaGNiaUFnSUNBZ0lHa2dQVDRnY21WemNHOXVjMmwyWlVwVFVYVmxjbWxsY3lod2NtOXdjeTV0WldScFlTbGJhVjBnSmlZZ2FTQThJSEJ5YjNCV1lXeDFaUzVzWlc1bmRHZ3NYRzRnSUNBZ0tWeHVJQ0FnSUdsbUlDZ2hZM1Z5Y21WdWRGTnBlbVZKYm1SbGVDQW1KaUJqZFhKeVpXNTBVMmw2WlVsdVpHVjRJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5ZGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR05oYkd4Q1lXTnJLSEJ5YjNCV1lXeDFaVnRqZFhKeVpXNTBVMmw2WlVsdVpHVjRYU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdYeTVwYzBGeWNtRjVLSEJ5YjNCV1lXeDFaU2tnSmlZZ2NISnZjRlpoYkhWbExteGxibWQwYUNBOVBUMGdNVnh1SUNBZ0lEOGdZMkZzYkVKaFkyc29jSEp2Y0ZaaGJIVmxXekJkS1Z4dUlDQWdJRG9nWTJGc2JFSmhZMnNvY0hKdmNGWmhiSFZsS1Z4dWZWeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2NtVnpjRzl1YzJsMlpVWnZiblJUYVhwbFUzUjViR1VnUFNCd2NtOXdjeUE5UGx4dUlDQnlaWE53YjI1emFYWmxVM1I1YkdVb1hHNGdJQ0FnY0hKdmNITXNYRzRnSUNBZ0ozTnBlbVVuTEZ4dUlDQWdJSE5wZW1VZ1BUNGdZM056WUZ4dUlDQWdJQ0FnWm05dWRDMXphWHBsT2lBa2UybHVabVZ5WlVadmJuUlRhWHBsS0hCeWIzQnpMQ0J6YVhwbEtYMDdYRzRnSUNBZ1lDeGNiaUFnS1Z4dUlsMTkgKi9cIikpO1xuY29uc3QgZ2V0TmFtZWRGb250U2l6ZSA9IHNpemUgPT4gU0laRV9QUk9QX05BTUVTLmZpbmQoc2l6ZVByb3AgPT4gc2l6ZSA9PT0gc2l6ZVByb3ApO1xuY29uc3QgaW5mZXJlU2l6ZSA9IHByb3BzID0+IGdldE5hbWVkRm9udFNpemUocHJvcHMuc2l6ZSkgfHwgU0laRV9QUk9QX05BTUVTLmZpbmQoc2l6ZVByb3AgPT4gcHJvcHNbc2l6ZVByb3BdKTtcbmNvbnN0IGluZmVyZVNwYWNlU2l6ZSA9IChwcm9wcywgc2l6ZSkgPT4ge1xuICBpZiAoXy5pc051bWJlcihzaXplKSkge1xuICAgIHJldHVybiBgJHtzaXplICogcHJvcHMudGhlbWUubmV3LnNwYWNlcn1weGA7XG4gIH0gZWxzZSBpZiAoc2l6ZSAmJiBwYXJzZUZsb2F0KHNpemUudG9TdHJpbmcoKSkgPT09IHNpemUpIHtcbiAgICByZXR1cm4gYCR7cGFyc2VGbG9hdChzaXplLnRvU3RyaW5nKCkpICogcHJvcHMudGhlbWUubmV3LnNwYWNlcn1weGA7XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn07XG5cbmNvbnN0IHJlc3BvbnNpdmVKU1F1ZXJpZXMgPSBtZWRpYSA9PiBbbWVkaWEueHNtYWxsLCBtZWRpYS5taW5Nb2JpbGUsIG1lZGlhLm1pblRhYmxldCwgbWVkaWEubWluRGVza3RvcCwgbWVkaWEubGFyZ2VEZXNrdG9wXTtcblxuY29uc3QgcmVzcG9uc2l2ZVN0eWxlID0gKHByb3BzLCB0YXJnZXRQcm9wLCBjYWxsQmFjaywgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIGxldCBwcm9wVmFsdWUgPSBudWxsO1xuXG4gIGlmICh0YXJnZXRQcm9wID09PSAnc2l6ZScpIHtcbiAgICBpZiAocHJvcHMuc2l6ZSkge1xuICAgICAgcHJvcFZhbHVlID0gcHJvcHMuc2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcFZhbHVlID0gaW5mZXJlU2l6ZShwcm9wcykgfHwgJ21kJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcHJvcFZhbHVlID0gcHJvcHNbdGFyZ2V0UHJvcF07XG4gIH1cblxuICBpZiAoIXByb3BWYWx1ZSkge1xuICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBjYWxsQmFjayhkZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKF8uaXNBcnJheShwcm9wVmFsdWUpICYmIHByb3BWYWx1ZS5sZW5ndGggPj0gMikge1xuICAgIGFzc2VydChwcm9wcy5tZWRpYSwgXCJNZWRpYSBpc24ndCBmb3VuZC4gTWFrZSBzdXJlIHRvIHN1cnJvdW5kIHdpdGggd2l0aE1lZGlhXCIpO1xuICAgIGNvbnN0IGN1cnJlbnRTaXplSW5kZXggPSBnZW5lcmF0ZVNlcXVlbmNlRnJvbVRvKDQsIC0xKS5maW5kKGkgPT4gcmVzcG9uc2l2ZUpTUXVlcmllcyhwcm9wcy5tZWRpYSlbaV0gJiYgaSA8IHByb3BWYWx1ZS5sZW5ndGgpO1xuXG4gICAgaWYgKCFjdXJyZW50U2l6ZUluZGV4ICYmIGN1cnJlbnRTaXplSW5kZXggIT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbEJhY2socHJvcFZhbHVlW2N1cnJlbnRTaXplSW5kZXhdKTtcbiAgfVxuXG4gIHJldHVybiBfLmlzQXJyYXkocHJvcFZhbHVlKSAmJiBwcm9wVmFsdWUubGVuZ3RoID09PSAxID8gY2FsbEJhY2socHJvcFZhbHVlWzBdKSA6IGNhbGxCYWNrKHByb3BWYWx1ZSk7XG59O1xuXG5jb25zdCBzdHlsZUFsaWFzZXMgPSBbWyd3aWR0aCcsICd3J10sIFsnaGVpZ2h0JywgJ2gnXSwgWydtaW5XaWR0aCddLCBbJ21pbkhlaWdodCddLCBbJ21heFdpZHRoJ10sIFsnbWF4SGVpZ2h0J10sIFsncGFkZGluZycsICdwJ10sIFsncGFkZGluZ1RvcCcsICdwdCddLCBbJ3BhZGRpbmdCb3R0b20nLCAncGInXSwgWydwYWRkaW5nTGVmdCcsICdwbCddLCBbJ3BhZGRpbmdSaWdodCcsICdwciddLCBbJ21hcmdpbicsICdtJ10sIFsnbWFyZ2luVG9wJywgJ210J10sIFsnbWFyZ2luQm90dG9tJywgJ21iJ10sIFsnbWFyZ2luTGVmdCcsICdtbCddLCBbJ21hcmdpblJpZ2h0JywgJ21yJ11dO1xuXG5jb25zdCBzdHlsZUV4aXN0cyA9IChwcm9wcywgc3R5bGUpID0+IHN0eWxlLnNvbWUoc3R5bGVOYW1lID0+IHByb3BzW3N0eWxlTmFtZV0pO1xuXG5jb25zdCBnZXRTaXplID0gKHByb3BzLCBzaXplKSA9PiB7XG4gIGlmIChfLmlzTnVtYmVyKHNpemUpKSB7XG4gICAgcmV0dXJuIGAke3NpemUgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyfXB4YDtcbiAgfSBlbHNlIGlmIChzaXplICYmIHBhcnNlRmxvYXQoc2l6ZSkudG9TdHJpbmcoKSA9PT0gc2l6ZSkge1xuICAgIHJldHVybiBgJHtwYXJzZUZsb2F0KHNpemUudG9TdHJpbmcoKSkgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyfXB4YDtcbiAgfVxuXG4gIHJldHVybiBzaXplO1xufTtcbnZhciBzcGFjZVN0eWxlcyA9IChwcm9wcyA9PlxuLyojX19QVVJFX18qL1xuY3NzKF8uZmxhdHRlbihzdHlsZUFsaWFzZXMuZmlsdGVyKGFsaWFzR3JvdXAgPT4gc3R5bGVFeGlzdHMocHJvcHMsIGFsaWFzR3JvdXApKS5tYXAoYWxpYXNHcm91cCA9PiB7XG4gIGNvbnN0IHN0eWxlTmFtZSA9IGFsaWFzR3JvdXBbMF07XG4gIHJldHVybiBhbGlhc0dyb3VwLm1hcChzdHlsZUFsaWFzID0+IHByb3BzW3N0eWxlQWxpYXNdICYmIHJlc3BvbnNpdmVTdHlsZShwcm9wcywgc3R5bGVBbGlhcywgc2l6ZSA9PlxuICAvKiNfX1BVUkVfXyovXG4gIGNzcyhjaGFuZ2VDYXNlLnBhcmFtQ2FzZShzdHlsZU5hbWUpLCBcIjpcIiwgZ2V0U2l6ZShwcm9wcywgc2l6ZSksIFwiO1wiICsgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IFwiXCIgOiBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTjBlV3hsVTNsemRHVnRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVhsRGIwUWlMQ0ptYVd4bElqb2ljM1I1YkdWVGVYTjBaVzB1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QmpjM01nZlNCbWNtOXRJQ2RBWlcxdmRHbHZiaTlqYjNKbEp6dGNibWx0Y0c5eWRDQmZJR1p5YjIwZ0oyeHZaR0Z6YUNjN1hHNWNibWx0Y0c5eWRDQjdJSEpsYzNCdmJuTnBkbVZUZEhsc1pTQjlJR1p5YjIwZ0ozNHZZMjl5WlZWSkwzVjBhV3h6TDJsdVptVnlaVk4wZVd4bEp6dGNibWx0Y0c5eWRDQmphR0Z1WjJWRFlYTmxJR1p5YjIwZ0oyTm9ZVzVuWlMxallYTmxKenRjYmx4dVkyOXVjM1FnYzNSNWJHVkJiR2xoYzJWeklEMGdXMXh1SUNCYkozZHBaSFJvSnl3Z0ozY25YU3hjYmlBZ1d5ZG9aV2xuYUhRbkxDQW5hQ2RkTEZ4dUlDQmJKMjFwYmxkcFpIUm9KMTBzWEc0Z0lGc25iV2x1U0dWcFoyaDBKMTBzWEc0Z0lGc25iV0Y0VjJsa2RHZ25YU3hjYmlBZ1d5ZHRZWGhJWldsbmFIUW5YU3hjYmlBZ1d5ZHdZV1JrYVc1bkp5d2dKM0FuWFN4Y2JpQWdXeWR3WVdSa2FXNW5WRzl3Snl3Z0ozQjBKMTBzWEc0Z0lGc25jR0ZrWkdsdVowSnZkSFJ2YlNjc0lDZHdZaWRkTEZ4dUlDQmJKM0JoWkdScGJtZE1aV1owSnl3Z0ozQnNKMTBzWEc0Z0lGc25jR0ZrWkdsdVoxSnBaMmgwSnl3Z0ozQnlKMTBzWEc0Z0lGc25iV0Z5WjJsdUp5d2dKMjBuWFN4Y2JpQWdXeWR0WVhKbmFXNVViM0FuTENBbmJYUW5YU3hjYmlBZ1d5ZHRZWEpuYVc1Q2IzUjBiMjBuTENBbmJXSW5YU3hjYmlBZ1d5ZHRZWEpuYVc1TVpXWjBKeXdnSjIxc0oxMHNYRzRnSUZzbmJXRnlaMmx1VW1sbmFIUW5MQ0FuYlhJblhTeGNibDA3WEc1Y2JtTnZibk4wSUhOMGVXeGxSWGhwYzNSeklEMGdLSEJ5YjNCekxDQnpkSGxzWlNrZ1BUNWNiaUFnYzNSNWJHVXVjMjl0WlNoemRIbHNaVTVoYldVZ1BUNGdjSEp2Y0hOYmMzUjViR1ZPWVcxbFhTazdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm5aWFJUYVhwbElEMGdLSEJ5YjNCekxDQnphWHBsS1NBOVBpQjdYRzRnSUdsbUlDaGZMbWx6VG5WdFltVnlLSE5wZW1VcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdBa2UzTnBlbVVnS2lCd2NtOXdjeTUwYUdWdFpTNXVaWGN1YzNCaFkyVnlmWEI0WUR0Y2JpQWdmU0JsYkhObElHbG1JQ2h6YVhwbElDWW1JSEJoY25ObFJteHZZWFFvYzJsNlpTa3VkRzlUZEhKcGJtY29LU0E5UFQwZ2MybDZaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmdKSHR3WVhKelpVWnNiMkYwS0hOcGVtVXVkRzlUZEhKcGJtY29LU2tnS2lCd2NtOXdjeTUwYUdWdFpTNXVaWGN1YzNCaFkyVnlmWEI0WUR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYzJsNlpUdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhCeWIzQnpJRDArSUdOemMyQmNiaUFnSkh0ZkxtWnNZWFIwWlc0b2MzUjViR1ZCYkdsaGMyVnpMbVpwYkhSbGNpaGhiR2xoYzBkeWIzVndJRDArSUhOMGVXeGxSWGhwYzNSektIQnliM0J6TENCaGJHbGhjMGR5YjNWd0tTa3ViV0Z3S0NoaGJHbGhjMGR5YjNWd0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2MzUjViR1ZPWVcxbElEMGdZV3hwWVhOSGNtOTFjRnN3WFR0Y2JpQWdJQ0J5WlhSMWNtNGdZV3hwWVhOSGNtOTFjQzV0WVhBb2MzUjViR1ZCYkdsaGN5QTlQaUJ3Y205d2MxdHpkSGxzWlVGc2FXRnpYU0FtSmx4dUlDQWdJQ0FnY21WemNHOXVjMmwyWlZOMGVXeGxLSEJ5YjNCekxDQnpkSGxzWlVGc2FXRnpMQ0J6YVhwbElEMCtJR056YzJCY2JpQWdJQ0FnSUNBZ0pIdGphR0Z1WjJWRFlYTmxMbkJoY21GdFEyRnpaU2h6ZEhsc1pVNWhiV1VwZlRvZ0pIdG5aWFJUYVhwbEtIQnliM0J6TENCemFYcGxLWDA3WEc0Z0lDQWdJQ0JnS1NrN1hHNGdJSDBwS1gwN1hHNGdJR0E3WEc0aVhYMD0gKi9cIikpKSk7XG59KSksIFwiO1wiICsgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IFwiXCIgOiBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTjBlV3hsVTNsemRHVnRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVhGRE1rSWlMQ0ptYVd4bElqb2ljM1I1YkdWVGVYTjBaVzB1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QmpjM01nZlNCbWNtOXRJQ2RBWlcxdmRHbHZiaTlqYjNKbEp6dGNibWx0Y0c5eWRDQmZJR1p5YjIwZ0oyeHZaR0Z6YUNjN1hHNWNibWx0Y0c5eWRDQjdJSEpsYzNCdmJuTnBkbVZUZEhsc1pTQjlJR1p5YjIwZ0ozNHZZMjl5WlZWSkwzVjBhV3h6TDJsdVptVnlaVk4wZVd4bEp6dGNibWx0Y0c5eWRDQmphR0Z1WjJWRFlYTmxJR1p5YjIwZ0oyTm9ZVzVuWlMxallYTmxKenRjYmx4dVkyOXVjM1FnYzNSNWJHVkJiR2xoYzJWeklEMGdXMXh1SUNCYkozZHBaSFJvSnl3Z0ozY25YU3hjYmlBZ1d5ZG9aV2xuYUhRbkxDQW5hQ2RkTEZ4dUlDQmJKMjFwYmxkcFpIUm9KMTBzWEc0Z0lGc25iV2x1U0dWcFoyaDBKMTBzWEc0Z0lGc25iV0Y0VjJsa2RHZ25YU3hjYmlBZ1d5ZHRZWGhJWldsbmFIUW5YU3hjYmlBZ1d5ZHdZV1JrYVc1bkp5d2dKM0FuWFN4Y2JpQWdXeWR3WVdSa2FXNW5WRzl3Snl3Z0ozQjBKMTBzWEc0Z0lGc25jR0ZrWkdsdVowSnZkSFJ2YlNjc0lDZHdZaWRkTEZ4dUlDQmJKM0JoWkdScGJtZE1aV1owSnl3Z0ozQnNKMTBzWEc0Z0lGc25jR0ZrWkdsdVoxSnBaMmgwSnl3Z0ozQnlKMTBzWEc0Z0lGc25iV0Z5WjJsdUp5d2dKMjBuWFN4Y2JpQWdXeWR0WVhKbmFXNVViM0FuTENBbmJYUW5YU3hjYmlBZ1d5ZHRZWEpuYVc1Q2IzUjBiMjBuTENBbmJXSW5YU3hjYmlBZ1d5ZHRZWEpuYVc1TVpXWjBKeXdnSjIxc0oxMHNYRzRnSUZzbmJXRnlaMmx1VW1sbmFIUW5MQ0FuYlhJblhTeGNibDA3WEc1Y2JtTnZibk4wSUhOMGVXeGxSWGhwYzNSeklEMGdLSEJ5YjNCekxDQnpkSGxzWlNrZ1BUNWNiaUFnYzNSNWJHVXVjMjl0WlNoemRIbHNaVTVoYldVZ1BUNGdjSEp2Y0hOYmMzUjViR1ZPWVcxbFhTazdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm5aWFJUYVhwbElEMGdLSEJ5YjNCekxDQnphWHBsS1NBOVBpQjdYRzRnSUdsbUlDaGZMbWx6VG5WdFltVnlLSE5wZW1VcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdBa2UzTnBlbVVnS2lCd2NtOXdjeTUwYUdWdFpTNXVaWGN1YzNCaFkyVnlmWEI0WUR0Y2JpQWdmU0JsYkhObElHbG1JQ2h6YVhwbElDWW1JSEJoY25ObFJteHZZWFFvYzJsNlpTa3VkRzlUZEhKcGJtY29LU0E5UFQwZ2MybDZaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmdKSHR3WVhKelpVWnNiMkYwS0hOcGVtVXVkRzlUZEhKcGJtY29LU2tnS2lCd2NtOXdjeTUwYUdWdFpTNXVaWGN1YzNCaFkyVnlmWEI0WUR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYzJsNlpUdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhCeWIzQnpJRDArSUdOemMyQmNiaUFnSkh0ZkxtWnNZWFIwWlc0b2MzUjViR1ZCYkdsaGMyVnpMbVpwYkhSbGNpaGhiR2xoYzBkeWIzVndJRDArSUhOMGVXeGxSWGhwYzNSektIQnliM0J6TENCaGJHbGhjMGR5YjNWd0tTa3ViV0Z3S0NoaGJHbGhjMGR5YjNWd0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2MzUjViR1ZPWVcxbElEMGdZV3hwWVhOSGNtOTFjRnN3WFR0Y2JpQWdJQ0J5WlhSMWNtNGdZV3hwWVhOSGNtOTFjQzV0WVhBb2MzUjViR1ZCYkdsaGN5QTlQaUJ3Y205d2MxdHpkSGxzWlVGc2FXRnpYU0FtSmx4dUlDQWdJQ0FnY21WemNHOXVjMmwyWlZOMGVXeGxLSEJ5YjNCekxDQnpkSGxzWlVGc2FXRnpMQ0J6YVhwbElEMCtJR056YzJCY2JpQWdJQ0FnSUNBZ0pIdGphR0Z1WjJWRFlYTmxMbkJoY21GdFEyRnpaU2h6ZEhsc1pVNWhiV1VwZlRvZ0pIdG5aWFJUYVhwbEtIQnliM0J6TENCemFYcGxLWDA3WEc0Z0lDQWdJQ0JnS1NrN1hHNGdJSDBwS1gwN1hHNGdJR0E3WEc0aVhYMD0gKi9cIikpKTtcblxudmFyIEZvcmNlTWVkaWFDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5jb25zdCBwYXRjaFRhcmdldHMgPSB7XG4gIHhzbWFsbDogWydtaW5Yc2FtbGwnLCAneHNtYWxsJywgJ21heE1vYmlsZScsICdtYXhUYWJsZXQnLCAnbWF4RGVza3RvcCcsICdtYXhMYXJnZURlc2t0b3AnXSxcbiAgbW9iaWxlOiBbJ21pblhzbWFsbCcsICdtaW5Nb2JpbGUnLCAnbW9iaWxlJywgJ21heE1vYmlsZScsICdtYXhUYWJsZXQnLCAnbWF4RGVza3RvcCcsICdtYXhMYXJnZURlc2t0b3AnXSxcbiAgdGFibGV0OiBbJ21pblhzbWFsbCcsICdtaW5Nb2JpbGUnLCAnbWluVGFibGV0JywgJ3RhYmxldCcsICdtYXhUYWJsZXQnLCAnbWF4RGVza3RvcCcsICdtYXhMYXJnZURlc2t0b3AnXSxcbiAgZGVza3RvcDogWydtaW5Yc21hbGwnLCAnbWluTW9iaWxlJywgJ21pblRhYmxldCcsICdtaW5EZXNrdG9wJywgJ2Rlc2t0b3AnLCAnbWF4RGVza3RvcCcsICdtYXhMYXJnZURlc2t0b3AnXSxcbiAgbGFyZ2VEZXNrdG9wOiBbJ21pblhzbWFsbCcsICdtaW5Nb2JpbGUnLCAnbWluVGFibGV0JywgJ21pbkRlc2t0b3AnLCAnbGFyZ2VEZXNrdG9wJywgJ21heExhcmdlRGVza3RvcCddXG59O1xudmFyIHdpdGhNZWRpYSQxID0gKFdyYXBwZWRDb21wb25lbnQgPT4gd2l0aE1lZGlhKHByb3BzID0+IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9yY2VNZWRpYUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZvcmNlTWVkaWFRdWVyeSA9PiB7XG4gIGxldCBwYXRjaGVkTWVkaWEgPSBwcm9wcy5tZWRpYTtcblxuICBpZiAoZm9yY2VNZWRpYVF1ZXJ5KSB7XG4gICAgcGF0Y2hlZE1lZGlhID0gXy5tYXBWYWx1ZXMocHJvcHMubWVkaWEsIChtZWRpYVF1ZXJ5TWF0Y2hlZCwgbWVkaWFRdWVyeU5hbWUpID0+IHBhdGNoVGFyZ2V0c1tmb3JjZU1lZGlhUXVlcnldLmluY2x1ZGVzKG1lZGlhUXVlcnlOYW1lKSk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBtZWRpYTogcGF0Y2hlZE1lZGlhLFxuICAgIGZvcmNlTWVkaWFRdWVyeTogZm9yY2VNZWRpYVF1ZXJ5XG4gIH0pLCBwcm9wcy5jaGlsZHJlbik7XG59KSkpO1xuXG5jb25zdCBTdHlsZWRTcGFjZXIgPSBfc3R5bGVkKFwiZGl2XCIsIHtcbiAgdGFyZ2V0OiBcImU1NmMyNzcwXCIsXG4gIGxhYmVsOiBcIlN0eWxlZFNwYWNlclwiXG59KShcImZsZXgtZ3JvdzpcIiwgcHJvcHMgPT4gcHJvcHMuZ3JvdyA/IDEgOiBudWxsLCBcIjtcIiwgcHJvcHMgPT4gcmVzcG9uc2l2ZVN0eWxlKHByb3BzLCAnc2l6ZScsIHNpemUgPT5cbi8qI19fUFVSRV9fKi9cbmNzcyhcIm1pbi13aWR0aDpcIiwgaW5mZXJlU3BhY2VTaXplKHByb3BzLCBzaXplKSwgXCI7bWluLWhlaWdodDpcIiwgaW5mZXJlU3BhY2VTaXplKHByb3BzLCBzaXplKSwgXCI7bGFiZWw6U3R5bGVkU3BhY2VyO1wiICsgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IFwiXCIgOiBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTndZV05sY2k1cWMzZ2lYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJWM1ZFSWl3aVptbHNaU0k2SWxOd1lXTmxjaTVxYzNnaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElITjBlV3hsWkNCbWNtOXRJQ2RBWlcxdmRHbHZiaTl6ZEhsc1pXUW5PMXh1YVcxd2IzSjBJSHNnWTNOeklIMGdabkp2YlNBblFHVnRiM1JwYjI0dlkyOXlaU2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUhzZ2NtVnpjRzl1YzJsMlpWTjBlV3hsTENCcGJtWmxjbVZUY0dGalpWTnBlbVVnZlNCbWNtOXRJQ2QrTDJOdmNtVlZTUzkxZEdsc2N5OXBibVpsY21WVGRIbHNaU2M3WEc1Y2JtbHRjRzl5ZENCemNHRmpaVk4wZVd4bGN5Qm1jbTl0SUNkK0wyTnZjbVZWU1M5MWRHbHNjeTl6ZEhsc1pWTjVjM1JsYlNjN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCVGRIbHNaV1JUY0dGalpYSWdQU0J6ZEhsc1pXUXVaR2wyWUZ4dUlDQm1iR1Y0TFdkeWIzYzZJQ1I3Y0hKdmNITWdQVDRnS0hCeWIzQnpMbWR5YjNjZ1B5QXhJRG9nYm5Wc2JDbDlPMXh1SUNCY2JpQWdKSHR3Y205d2N5QTlQaUJ5WlhOd2IyNXphWFpsVTNSNWJHVW9jSEp2Y0hNc0lDZHphWHBsSnl3Z2MybDZaU0E5UGlCamMzTmdYRzRnSUNBZ2JXbHVMWGRwWkhSb09pQWtlMmx1Wm1WeVpWTndZV05sVTJsNlpTaHdjbTl3Y3l3Z2MybDZaU2w5TzF4dUlDQWdJRzFwYmkxb1pXbG5hSFE2SUNSN2FXNW1aWEpsVTNCaFkyVlRhWHBsS0hCeWIzQnpMQ0J6YVhwbEtYMDdYRzRnSUdBcGZUdGNibHh1SUNBa2UzQnliM0J6SUQwK0lITndZV05sVTNSNWJHVnpLSEJ5YjNCektYMWNibUE3WEc1Y2JtTnZibk4wSUZOd1lXTmxjaUE5SUhCeWIzQnpJRDArSUR4VGRIbHNaV1JUY0dGalpYSWdleTR1TG5CeWIzQnpmU0F2UGp0Y2JseHVVM0JoWTJWeUxtUmxabUYxYkhSUWNtOXdjeUE5SUh0Y2JpQWdjMmw2WlRvZ01TeGNibjA3WEc1Y2JsTndZV05sY2k1d2NtOXdWSGx3WlhNZ1BTQlFjbTl3Vkhsd1pYTXVjMmhoY0dVb2UxeHVJQ0J6YVhwbE9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVmU2t1YVhOU1pYRjFhWEpsWkR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzQmhZMlZ5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU0ZOd1lXTmxjaUE5SUhCeWIzQnpJRDArSUNoY2JpQWdQRk53WVdObGNpQnRhVzVJWldsbmFIUTlYQ0l4Y0hoY0lpQjdMaTR1Y0hKdmNITjlJQzgrWEc0cE8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1ZsTndZV05sY2lBOUlIQnliM0J6SUQwK0lDaGNiaUFnUEZOd1lXTmxjaUJ0YVc1WGFXUjBhRDFjSWpGd2VGd2lJSHN1TGk1d2NtOXdjMzBnTHo1Y2JpazdYRzRpWFgwPSAqL1wiKSkpLCBcIjtcIiwgcHJvcHMgPT4gc3BhY2VTdHlsZXMocHJvcHMpLCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBcIlwiIDogXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE53WVdObGNpNXFjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCVVhORElpd2labWxzWlNJNklsTndZV05sY2k1cWMzZ2lMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJSE4wZVd4bFpDQm1jbTl0SUNkQVpXMXZkR2x2Ymk5emRIbHNaV1FuTzF4dWFXMXdiM0owSUhzZ1kzTnpJSDBnWm5KdmJTQW5RR1Z0YjNScGIyNHZZMjl5WlNjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElIc2djbVZ6Y0c5dWMybDJaVk4wZVd4bExDQnBibVpsY21WVGNHRmpaVk5wZW1VZ2ZTQm1jbTl0SUNkK0wyTnZjbVZWU1M5MWRHbHNjeTlwYm1abGNtVlRkSGxzWlNjN1hHNWNibWx0Y0c5eWRDQnpjR0ZqWlZOMGVXeGxjeUJtY205dElDZCtMMk52Y21WVlNTOTFkR2xzY3k5emRIbHNaVk41YzNSbGJTYzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlRkSGxzWldSVGNHRmpaWElnUFNCemRIbHNaV1F1WkdsMllGeHVJQ0JtYkdWNExXZHliM2M2SUNSN2NISnZjSE1nUFQ0Z0tIQnliM0J6TG1keWIzY2dQeUF4SURvZ2JuVnNiQ2w5TzF4dUlDQmNiaUFnSkh0d2NtOXdjeUE5UGlCeVpYTndiMjV6YVhabFUzUjViR1VvY0hKdmNITXNJQ2R6YVhwbEp5d2djMmw2WlNBOVBpQmpjM05nWEc0Z0lDQWdiV2x1TFhkcFpIUm9PaUFrZTJsdVptVnlaVk53WVdObFUybDZaU2h3Y205d2N5d2djMmw2WlNsOU8xeHVJQ0FnSUcxcGJpMW9aV2xuYUhRNklDUjdhVzVtWlhKbFUzQmhZMlZUYVhwbEtIQnliM0J6TENCemFYcGxLWDA3WEc0Z0lHQXBmVHRjYmx4dUlDQWtlM0J5YjNCeklEMCtJSE53WVdObFUzUjViR1Z6S0hCeWIzQnpLWDFjYm1BN1hHNWNibU52Ym5OMElGTndZV05sY2lBOUlIQnliM0J6SUQwK0lEeFRkSGxzWldSVGNHRmpaWElnZXk0dUxuQnliM0J6ZlNBdlBqdGNibHh1VTNCaFkyVnlMbVJsWm1GMWJIUlFjbTl3Y3lBOUlIdGNiaUFnYzJsNlpUb2dNU3hjYm4wN1hHNWNibE53WVdObGNpNXdjbTl3Vkhsd1pYTWdQU0JRY205d1ZIbHdaWE11YzJoaGNHVW9lMXh1SUNCemFYcGxPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1ZlNrdWFYTlNaWEYxYVhKbFpEdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVM0JoWTJWeU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1NGTndZV05sY2lBOUlIQnliM0J6SUQwK0lDaGNiaUFnUEZOd1lXTmxjaUJ0YVc1SVpXbG5hSFE5WENJeGNIaGNJaUI3TGk0dWNISnZjSE45SUM4K1hHNHBPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWbE53WVdObGNpQTlJSEJ5YjNCeklEMCtJQ2hjYmlBZ1BGTndZV05sY2lCdGFXNVhhV1IwYUQxY0lqRndlRndpSUhzdUxpNXdjbTl3YzMwZ0x6NWNiaWs3WEc0aVhYMD0gKi9cIik7XG5cbmNvbnN0IFNwYWNlciA9IHByb3BzID0+IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVkU3BhY2VyLCBwcm9wcyk7XG5cblNwYWNlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHNpemU6IDFcbn07XG5TcGFjZXIucHJvcFR5cGVzID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc2l6ZTogUHJvcFR5cGVzLm51bWJlclxufSkuaXNSZXF1aXJlZDtcblxuY29uc3QgZ2V0SW50cmFJdGVtc1NwYWNlciA9IHByb3BzID0+IHtcbiAgbGV0IHNpemVQcm9wID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcblxuICBzaXplUHJvcCA9IHByb3BzLnNwYWNlQmV0d2VlbiA/IHBhcnNlRmxvYXQocHJvcHMuc3BhY2VCZXR3ZWVuKSA6IG51bGw7XG5cbiAgaWYgKCFzaXplUHJvcCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3BhY2VyLCB7XG4gICAgc2l6ZTogc2l6ZVByb3BcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRCb3JkZXJDb2xvciA9IHByb3BzID0+IHtcbiAgbGV0IGNvbG9yID0gJ2xpZ2h0JztcblxuICBpZiAocHJvcHMuYm9yZGVyQ29sb3IpIHtcbiAgICBjb2xvciA9IHByb3BzLmJvcmRlckNvbG9yO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzLnRoZW1lLmJvcmRlcnMuY29sb3JbY29sb3JdIHx8IHByb3BzLmJvcmRlckNvbG9yO1xufTtcblxuY29uc3QgZ2V0Qm9yZGVyV2VpZ2h0ID0gcHJvcHMgPT4ge1xuICBsZXQgd2VpZ2h0ID0gJ3RoaW4nO1xuXG4gIGlmIChwcm9wcy5ib3JkZXJXZWlnaHQpIHtcbiAgICB3ZWlnaHQgPSBwcm9wcy5ib3JkZXJXZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gcHJvcHMudGhlbWUuYm9yZGVycy5zaXplW3dlaWdodF07XG59O1xuXG5jb25zdCBnZXRCb3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGxldCByYWRpdXMgPSAnbm9ybWFsJztcblxuICBpZiAocHJvcHMuYm9yZGVyUmFkaXVzKSB7XG4gICAgcmFkaXVzID0gcHJvcHMuYm9yZGVyUmFkaXVzO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzLnRoZW1lLmJvcmRlcnMucmFkaXVzW3JhZGl1c10gfHwgcmFkaXVzO1xufTtcblxuY29uc3QgZ2V0SnVzdGlmeUNvbnRlbnQgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5zcGFjZUV2ZW5seUp1c3RpZmllZCkge1xuICAgIHJldHVybiAnc3BhY2UtZXZlbmx5JztcbiAgfSBlbHNlIGlmIChwcm9wcy5zcGFjZUFyb3VuZEp1c3RpZmllZCkge1xuICAgIHJldHVybiAnc3BhY2UtYXJvdW5kJztcbiAgfSBlbHNlIGlmIChwcm9wcy5zcGFjZUJldHdlZW5KdXN0aWZpZWQpIHtcbiAgICByZXR1cm4gJ3NwYWNlLWJldHdlZW4nO1xuICB9IGVsc2UgaWYgKHByb3BzLnN0cmV0Y2hKdXN0aWZpZWQpIHtcbiAgICByZXR1cm4gJ3N0cmV0Y2gnO1xuICB9IGVsc2UgaWYgKHByb3BzLnRvcEp1c3RpZmllZCkge1xuICAgIHJldHVybiAnZmxleC1zdGFydCc7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2VudGVySnVzdGlmaWVkKSB7XG4gICAgcmV0dXJuICdjZW50ZXInO1xuICB9IGVsc2UgaWYgKHByb3BzLmJvdHRvbUp1c3RpZmllZCkge1xuICAgIHJldHVybiAnZmxleC1lbmQnO1xuICB9IGVsc2UgaWYgKHByb3BzLmxlZnRKdXN0aWZpZWQpIHtcbiAgICByZXR1cm4gJ2ZsZXgtc3RhcnQnO1xuICB9IGVsc2UgaWYgKHByb3BzLnJpZ2h0SnVzdGlmaWVkKSB7XG4gICAgcmV0dXJuICdmbGV4LWVuZCc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldEFsaWduSXRlbXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5zdHJldGNoQWxpZ25lZCkge1xuICAgIHJldHVybiAnc3RyZXRjaCc7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2VudGVyQWxpZ25lZCkge1xuICAgIHJldHVybiAnY2VudGVyJztcbiAgfSBlbHNlIGlmIChwcm9wcy50b3BBbGlnbmVkKSB7XG4gICAgcmV0dXJuICdmbGV4LXN0YXJ0JztcbiAgfSBlbHNlIGlmIChwcm9wcy5ib3R0b21BbGlnbmVkKSB7XG4gICAgcmV0dXJuICdmbGV4LWVuZCc7XG4gIH0gZWxzZSBpZiAocHJvcHMubGVmdEFsaWduZWQpIHtcbiAgICByZXR1cm4gJ2ZsZXgtc3RhcnQnO1xuICB9IGVsc2UgaWYgKHByb3BzLnJpZ2h0QWxpZ25lZCkge1xuICAgIHJldHVybiAnZmxleC1lbmQnO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBTdHlsZWRMaW5lYXJMYXlvdXQgPSB3aXRoTWVkaWEkMShfc3R5bGVkKFwiZGl2XCIsIHtcbiAgdGFyZ2V0OiBcImUxNmdxeXdrMFwiLFxuICBsYWJlbDogXCJTdHlsZWRMaW5lYXJMYXlvdXRcIlxufSkoXCJ3aWR0aDpcIiwgcHJvcHMgPT4gcHJvcHMuZnVsbFdpZHRoID8gJzEwMCUnIDogcHJvcHMud2lkdGgsIFwiO2hlaWdodDpcIiwgcHJvcHMgPT4gcHJvcHMuZnVsbEhlaWdodCA/ICcxMDAlJyA6IHByb3BzLmhlaWdodCwgXCI7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpcIiwgcHJvcHMgPT4gcHJvcHMucm93ID8gJ3JvdycgOiAnY29sdW1uJywgXCI7ZmxleC1ncm93OlwiLCBwcm9wcyA9PiBwcm9wcy5ncm93ID8gMSA6IG51bGwsIFwiO2p1c3RpZnktY29udGVudDpcIiwgcHJvcHMgPT4gZ2V0SnVzdGlmeUNvbnRlbnQocHJvcHMpIHx8ICdmbGV4LXN0YXJ0JywgXCI7YWxpZ24taXRlbXM6XCIsIHByb3BzID0+IGdldEFsaWduSXRlbXMocHJvcHMpIHx8ICdjZW50ZXInLCBcIjtib3JkZXI6XCIsIHByb3BzID0+IHByb3BzLmJvcmRlcmVkICYmIGBzb2xpZCAke2dldEJvcmRlcldlaWdodChwcm9wcyl9cHggJHtnZXRCb3JkZXJDb2xvcihwcm9wcyl9YCwgXCI7Ym9yZGVyLXJhZGl1czpcIiwgcHJvcHMgPT4gZ2V0Qm9yZGVyUmFkaXVzKHByb3BzKSwgXCJweDtib3JkZXItdG9wOlwiLCBwcm9wcyA9PiBwcm9wcy50b3BCb3JkZXJlZCAmJiBgc29saWQgJHtnZXRCb3JkZXJXZWlnaHQocHJvcHMpfXB4ICR7Z2V0Qm9yZGVyQ29sb3IocHJvcHMpfWAsIFwiO2JvcmRlci1sZWZ0OlwiLCBwcm9wcyA9PiBwcm9wcy5sZWZ0Qm9yZGVyZWQgJiYgYHNvbGlkICR7Z2V0Qm9yZGVyV2VpZ2h0KHByb3BzKX1weCAke2dldEJvcmRlckNvbG9yKHByb3BzKX1gLCBcIjtib3JkZXItYm90dG9tOlwiLCBwcm9wcyA9PiBwcm9wcy5ib3R0b21Cb3JkZXJlZCAmJiBgc29saWQgJHtnZXRCb3JkZXJXZWlnaHQocHJvcHMpfXB4ICR7Z2V0Qm9yZGVyQ29sb3IocHJvcHMpfWAsIFwiO2JvcmRlci1yaWdodDpcIiwgcHJvcHMgPT4gcHJvcHMucmlnaHRCb3JkZXJlZCAmJiBgc29saWQgJHtnZXRCb3JkZXJXZWlnaHQocHJvcHMpfXB4ICR7Z2V0Qm9yZGVyQ29sb3IocHJvcHMpfWAsIFwiO3BhZGRpbmc6XCIsIHByb3BzID0+IHByb3BzLnBhZGRpbmcgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyLCBcInB4O3BhZGRpbmctbGVmdDpcIiwgcHJvcHMgPT4gcHJvcHMucGFkZGluZ0xlZnQgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyLCBcInB4O3BhZGRpbmctcmlnaHQ6XCIsIHByb3BzID0+IHByb3BzLnBhZGRpbmdSaWdodCAqIHByb3BzLnRoZW1lLm5ldy5zcGFjZXIsIFwicHg7cGFkZGluZy10b3A6XCIsIHByb3BzID0+IHByb3BzLnBhZGRpbmdUb3AgKiBwcm9wcy50aGVtZS5uZXcuc3BhY2VyLCBcInB4O3BhZGRpbmctYm90dG9tOlwiLCBwcm9wcyA9PiBwcm9wcy5wYWRkaW5nQm90dG9tICogcHJvcHMudGhlbWUubmV3LnNwYWNlciwgXCJweDtcIiwgcHJvcHMgPT4gc3BhY2VTdHlsZXMocHJvcHMpLCBcIiBcIiwgcHJvcHMgPT4gYm94Q29sb3JzU3R5bGVzKHByb3BzKSwgXCIgXCIsIHByb3BzID0+IHByb3BzLmN1c3RvbVN0eWxlcyAmJiBwcm9wcy5jdXN0b21TdHlsZXMocHJvcHMpLCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBcIlwiIDogXCJcIikpO1xuY29uc3QgTGluZWFyTGF5b3V0ID0gcHJvcHMgPT4gUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZWRMaW5lYXJMYXlvdXQsIHByb3BzLCBpbmplY3RFbGVtZW50QmV0d2VlbkNoaWxkRWxlbWVudHMocHJvcHMuY2hpbGRyZW4sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuZ2V0SW50cmFJdGVtc1NwYWNlcihwcm9wcyksIHRydWUpKTtcblxuLy8gdGhlc2Ugc2l6ZXMgYXJlIGFyYml0cmFyeSBhbmQgeW91IGNhbiBzZXQgdGhlbSB0byB3aGF0ZXZlciB5b3Ugd2lzaFxuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5cbmZ1bmN0aW9uIFdyYXBwZXIoe1xuICBjaGlsZHJlbixcbiAgdGhlbWUgPSBkZWZhdWx0VGhlbWVcbn0pIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZVByb3ZpZGVyLCB7XG4gICAgdGhlbWU6IHRoZW1lXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluZWFyTGF5b3V0LCB7XG4gICAgcm93OiB0cnVlLFxuICAgIGxlZnRKdXN0aWZpZWQ6IHRydWUsXG4gICAgdG9wQWxpZ25lZDogdHJ1ZVxuICB9LCBjaGlsZHJlbikpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgV3JhcHBlcjtcbiJdfQ== */\"))\n    );\n  });\n}, \";\", function (props) {\n  return spaceStyles(props);\n}, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwYWNlci5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUXNDIiwiZmlsZSI6IlNwYWNlci5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcmVzcG9uc2l2ZVN0eWxlLCBpbmZlcmVTcGFjZVNpemUgfSBmcm9tICd+L2NvcmVVSS91dGlscy9pbmZlcmVTdHlsZSc7XG5cbmltcG9ydCBzcGFjZVN0eWxlcyBmcm9tICd+L2NvcmVVSS91dGlscy9zdHlsZVN5c3RlbSc7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRTcGFjZXIgPSBzdHlsZWQuZGl2YFxuICBmbGV4LWdyb3c6ICR7cHJvcHMgPT4gKHByb3BzLmdyb3cgPyAxIDogbnVsbCl9O1xuICBcbiAgJHtwcm9wcyA9PiByZXNwb25zaXZlU3R5bGUocHJvcHMsICdzaXplJywgc2l6ZSA9PiBjc3NgXG4gICAgbWluLXdpZHRoOiAke2luZmVyZVNwYWNlU2l6ZShwcm9wcywgc2l6ZSl9O1xuICAgIG1pbi1oZWlnaHQ6ICR7aW5mZXJlU3BhY2VTaXplKHByb3BzLCBzaXplKX07XG4gIGApfTtcblxuICAke3Byb3BzID0+IHNwYWNlU3R5bGVzKHByb3BzKX1cbmA7XG5cbmNvbnN0IFNwYWNlciA9IHByb3BzID0+IDxTdHlsZWRTcGFjZXIgey4uLnByb3BzfSAvPjtcblxuU3BhY2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogMSxcbn07XG5cblNwYWNlci5wcm9wVHlwZXMgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLFxufSkuaXNSZXF1aXJlZDtcblxuZXhwb3J0IGRlZmF1bHQgU3BhY2VyO1xuXG5leHBvcnQgY29uc3QgSFNwYWNlciA9IHByb3BzID0+IChcbiAgPFNwYWNlciBtaW5IZWlnaHQ9XCIxcHhcIiB7Li4ucHJvcHN9IC8+XG4pO1xuXG5leHBvcnQgY29uc3QgVlNwYWNlciA9IHByb3BzID0+IChcbiAgPFNwYWNlciBtaW5XaWR0aD1cIjFweFwiIHsuLi5wcm9wc30gLz5cbik7XG4iXX0= */\");\n\nvar Spacer = function Spacer(props) {\n  return React.createElement(StyledSpacer, props);\n};\n\nSpacer.defaultProps = {\n  size: 1\n};\nSpacer.propTypes = PropTypes.shape({\n  size: PropTypes.number\n}).isRequired;\n\nvar getIntraItemsSpacer = function getIntraItemsSpacer(props) {\n  var sizeProp = null; // eslint-disable-next-line react/prop-types\n\n  sizeProp = props.spaceBetween ? parseFloat(props.spaceBetween) : null;\n\n  if (!sizeProp) {\n    return null;\n  }\n\n  return React.createElement(Spacer, {\n    size: sizeProp\n  });\n};\n\nvar getBorderColor = function getBorderColor(props) {\n  var color = 'light';\n\n  if (props.borderColor) {\n    color = props.borderColor;\n  }\n\n  return props.theme.borders.color[color] || props.borderColor;\n};\n\nvar getBorderWeight = function getBorderWeight(props) {\n  var weight = 'thin';\n\n  if (props.borderWeight) {\n    weight = props.borderWeight;\n  }\n\n  return props.theme.borders.size[weight];\n};\n\nvar getBorderRadius = function getBorderRadius(props) {\n  var radius = 'normal';\n\n  if (props.borderRadius) {\n    radius = props.borderRadius;\n  }\n\n  return props.theme.borders.radius[radius] || radius;\n};\n\nvar getJustifyContent = function getJustifyContent(props) {\n  if (props.spaceEvenlyJustified) {\n    return 'space-evenly';\n  } else if (props.spaceAroundJustified) {\n    return 'space-around';\n  } else if (props.spaceBetweenJustified) {\n    return 'space-between';\n  } else if (props.stretchJustified) {\n    return 'stretch';\n  } else if (props.topJustified) {\n    return 'flex-start';\n  } else if (props.centerJustified) {\n    return 'center';\n  } else if (props.bottomJustified) {\n    return 'flex-end';\n  } else if (props.leftJustified) {\n    return 'flex-start';\n  } else if (props.rightJustified) {\n    return 'flex-end';\n  }\n\n  return null;\n};\n\nvar getAlignItems = function getAlignItems(props) {\n  if (props.stretchAligned) {\n    return 'stretch';\n  } else if (props.centerAligned) {\n    return 'center';\n  } else if (props.topAligned) {\n    return 'flex-start';\n  } else if (props.bottomAligned) {\n    return 'flex-end';\n  } else if (props.leftAligned) {\n    return 'flex-start';\n  } else if (props.rightAligned) {\n    return 'flex-end';\n  }\n\n  return null;\n};\n\nvar StyledLinearLayout = withMedia$1(_styled(\"div\", {\n  target: \"e16gqywk0\",\n  label: \"StyledLinearLayout\"\n})(\"width:\", function (props) {\n  return props.fullWidth ? '100%' : props.width;\n}, \";height:\", function (props) {\n  return props.fullHeight ? '100%' : props.height;\n}, \";box-sizing:border-box;display:flex;flex-direction:\", function (props) {\n  return props.row ? 'row' : 'column';\n}, \";flex-grow:\", function (props) {\n  return props.grow ? 1 : null;\n}, \";justify-content:\", function (props) {\n  return getJustifyContent(props) || 'flex-start';\n}, \";align-items:\", function (props) {\n  return getAlignItems(props) || 'center';\n}, \";border:\", function (props) {\n  return props.bordered && \"solid \".concat(getBorderWeight(props), \"px \").concat(getBorderColor(props));\n}, \";border-radius:\", function (props) {\n  return getBorderRadius(props);\n}, \"px;border-top:\", function (props) {\n  return props.topBordered && \"solid \".concat(getBorderWeight(props), \"px \").concat(getBorderColor(props));\n}, \";border-left:\", function (props) {\n  return props.leftBordered && \"solid \".concat(getBorderWeight(props), \"px \").concat(getBorderColor(props));\n}, \";border-bottom:\", function (props) {\n  return props.bottomBordered && \"solid \".concat(getBorderWeight(props), \"px \").concat(getBorderColor(props));\n}, \";border-right:\", function (props) {\n  return props.rightBordered && \"solid \".concat(getBorderWeight(props), \"px \").concat(getBorderColor(props));\n}, \";padding:\", function (props) {\n  return props.padding * props.theme.new.spacer;\n}, \"px;padding-left:\", function (props) {\n  return props.paddingLeft * props.theme.new.spacer;\n}, \"px;padding-right:\", function (props) {\n  return props.paddingRight * props.theme.new.spacer;\n}, \"px;padding-top:\", function (props) {\n  return props.paddingTop * props.theme.new.spacer;\n}, \"px;padding-bottom:\", function (props) {\n  return props.paddingBottom * props.theme.new.spacer;\n}, \"px;\", function (props) {\n  return spaceStyles(props);\n}, \" \", function (props) {\n  return boxColorsStyles(props);\n}, \" \", function (props) {\n  return props.customStyles && props.customStyles(props);\n}, process.env.NODE_ENV === \"production\" ? \"\" : \"\"));\n\nvar LinearLayout = function LinearLayout(props) {\n  return React.createElement(StyledLinearLayout, props, injectElementBetweenChildElements(props.children, // eslint-disable-line react/prop-types\n  getIntraItemsSpacer(props), true));\n}; // these sizes are arbitrary and you can set them to whatever you wish\n\n/* eslint-disable react/prop-types */\n\n\nfunction Wrapper(_ref) {\n  var children = _ref.children,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme;\n  return React.createElement(\"div\", null, React.createElement(ThemeProvider, {\n    theme: theme\n  }, React.createElement(LinearLayout, {\n    row: true,\n    leftJustified: true,\n    topAligned: true\n  }, children)));\n}\n\nvar _default = Wrapper;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Theme, \"Theme\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(defaultTheme, \"defaultTheme\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(_extends, \"_extends\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(generateMissingKeys, \"generateMissingKeys\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(injectElementBetweenChildElements, \"injectElementBetweenChildElements\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(assert, \"assert\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(generateSequenceFromTo, \"generateSequenceFromTo\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(SIZE_PROP_NAMES, \"SIZE_PROP_NAMES\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(boxModesColors, \"boxModesColors\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(infereControlMode, \"infereControlMode\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(infereBoxColors, \"infereBoxColors\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(boxColorsStyles, \"boxColorsStyles\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getNamedFontSize, \"getNamedFontSize\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(infereSize, \"infereSize\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(infereSpaceSize, \"infereSpaceSize\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(responsiveJSQueries, \"responsiveJSQueries\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(responsiveStyle, \"responsiveStyle\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(styleAliases, \"styleAliases\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(styleExists, \"styleExists\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getSize, \"getSize\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(spaceStyles, \"spaceStyles\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(ForceMediaContext, \"ForceMediaContext\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(patchTargets, \"patchTargets\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(withMedia$1, \"withMedia$1\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(StyledSpacer, \"StyledSpacer\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(Spacer, \"Spacer\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getIntraItemsSpacer, \"getIntraItemsSpacer\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getBorderColor, \"getBorderColor\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getBorderWeight, \"getBorderWeight\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getBorderRadius, \"getBorderRadius\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getJustifyContent, \"getJustifyContent\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(getAlignItems, \"getAlignItems\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(StyledLinearLayout, \"StyledLinearLayout\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(LinearLayout, \"LinearLayout\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(Wrapper, \"Wrapper\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/muhammad-magdi/projects/bractal-pkg/dist/main.es.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();\n\nWrapper.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Wrapper\",\n  \"props\": {\n    \"theme\": {\n      \"defaultValue\": {\n        \"value\": \"{\\n  new: {\\n    inputs: {\\n      focusBorderColor: {\\n        primary: '#0065b3',\\n        secondary: '#e28203'\\n      },\\n      placeholderColor: 'rgba(0,0,0,0.22)'\\n    },\\n    colors: {\\n      buttons: {\\n        primary: {\\n          background: '#33a8ff',\\n          backgroundinverted: '#FFFFFF',\\n          line: '#FFFFFF',\\n          lineInverted: '#33a8ff'\\n        },\\n        secondary: {\\n          background: '#fb9410',\\n          backgroundinverted: '#FFFFFF',\\n          line: '#FFFFFF',\\n          lineInverted: '#fb9410'\\n        },\\n        passive: {\\n          background: '#e5e5e5',\\n          backgroundinverted: '#FFFFFF',\\n          line: 'rgba(0, 0, 0, 0.7)',\\n          lineInverted: '#aaaaaa'\\n        },\\n        disabled: {\\n          background: '#aaaaaa',\\n          backgroundinverted: '#FFFFFF',\\n          line: '#FFFFFF',\\n          lineInverted: '#aaaaaa'\\n        },\\n        error: {\\n          background: '#d32f2f',\\n          backgroundinverted: '#FFFFFF',\\n          line: '#FFFFFF',\\n          lineInverted: '#d32f2f'\\n        }\\n      },\\n      labels: {\\n        normal: {\\n          primary: '#33a8ff',\\n          secondary: '#fb9410',\\n          important: '#000000',\\n          emphasized: 'rgba(0, 0, 0, 0.7)',\\n          normal: 'rgba(0, 0, 0, 0.5)',\\n          subtle: 'rgba(0, 0, 0, 0.35)',\\n          hint: 'rgba(0, 0, 0, 0.22)',\\n          error: '#d32f2f'\\n        },\\n        inverted: {\\n          primary: 'white',\\n          secondary: 'white',\\n          important: 'white',\\n          emphasized: 'rgba(255, 255, 255, 0.7)',\\n          normal: 'rgba(255, 255, 255, 0.5)',\\n          subtle: 'rgba(255, 255, 255, 0.4)',\\n          hint: 'rgba(255, 255, 255, 0.3)',\\n          error: 'red'\\n        },\\n        borders: {\\n          normal: {\\n            hint: 'rgba(0,0,0,0.05)',\\n            subtle: 'rgba(0,0,0,0.1)',\\n            normal: 'rgba(0,0,0,0.3)',\\n            dark: 'rgba(0,0,0,0.5)',\\n            important: 'black'\\n          },\\n          inverted: {\\n            important: 'white',\\n            normal: 'rgba(255, 255, 255, 0.7)',\\n            subtle: 'rgba(255, 255, 255, 0.5)',\\n            hint: 'rgba(255, 255, 255, 0.3)'\\n          }\\n        }\\n      },\\n      backgrounds: {\\n        background: '#fdfdfd',\\n        darkBackground: '#dcdcdc',\\n        panelHeader: '#f2f2f2',\\n        panel: '#f9f9f9',\\n        lightPanelHeader: '#e5e5e5'\\n      },\\n      named: {\\n        primary: '#33a8ff',\\n        secondary: '#fb9410',\\n        error: '#d32f2f',\\n        info: '#5c9ec0',\\n        success: '#7CB342',\\n        warning: '#FFB300',\\n        default: '#708090',\\n        inverted: '#FFFFFF',\\n        foreGround: '#FFFFFF'\\n      }\\n    },\\n    spacer: 10,\\n    fonts: {\\n      sizes: {\\n        header: 36,\\n        xxl: 25,\\n        xl: 20,\\n        lg: 18,\\n        md: 16,\\n        sm: 14,\\n        xs: 12,\\n        xxs: 10\\n      },\\n      weights: {\\n        extraBold: 900,\\n        bold: 700,\\n        semiBold: 600,\\n        regular: 400,\\n        light: 300,\\n        normal: 'normal'\\n      }\\n    },\\n    borders: {\\n      size: {\\n        thin: 1,\\n        normal: 2,\\n        bold: 3\\n      },\\n      color: {\\n        extraLight: 'rgba(0,0,0,0.05)',\\n        light: 'rgba(0,0,0,0.1)',\\n        normal: 'rgba(0,0,0,0.3)',\\n        dark: 'rgba(0,0,0,0.5)',\\n        lightGray: '#e5e5e5'\\n      },\\n      radius: {\\n        sm: 3,\\n        md: 5,\\n        lg: 10,\\n        xl: 18,\\n        xxl: 21\\n      }\\n    }\\n  },\\n  colors: {\\n    primary: '#33a8ff',\\n    primaryHover: '#1e97f0',\\n    primaryClicked: '#0a7bcd',\\n    primaryDark: '#2c8bd2',\\n    secondary: '#fb9410',\\n    secondaryHover: '#f08a07',\\n    secondaryClicked: '#e5870f',\\n    secondaryDark: '#cc790e',\\n    error: '#D32f2f',\\n    success: 'green',\\n    cellHoverColor: 'rgba(48, 157, 224, 0.1)',\\n    cellHoverColorAlt: 'rgba(48, 157, 224, 0.2)',\\n    link: '#fb9410',\\n    backgroundColor: '#f9f9f9',\\n    icon: '#7f7f7f',\\n    labels: {\\n      important: '#000000',\\n      normal: 'rgba(0, 0, 0, 0.5)',\\n      emphasized: 'rgba(0, 0, 0, 0.7)',\\n      subtle: 'rgba(0, 0, 0, 0.35)',\\n      hint: 'rgba(0, 0, 0, 0.22)'\\n    },\\n    invertedLabels: {\\n      important: 'white',\\n      normal: 'rgba(255, 255, 255, 0.7)',\\n      subtle: 'rgba(255, 255, 255, 0.5)',\\n      hint: 'rgba(255, 255, 255, 0.3)'\\n    },\\n    named: {\\n      white: '#FFFFFF',\\n      grey: 'rgba(229, 229, 229, 0.7)',\\n      extraLightGrey: '#fbfbfa'\\n    }\\n  },\\n  fonts: {\\n    sizes: {\\n      xxxLarge: 48,\\n      xxLarge: 36,\\n      xLarge: 25,\\n      large: 18,\\n      medium: 16,\\n      small: 14,\\n      xSmall: 12,\\n      xxSmall: 11,\\n      xxxSmall: 9.5\\n    },\\n    weights: {\\n      extraBold: 900,\\n      bold: 700,\\n      semiBold: 600,\\n      regular: 400,\\n      normal: 'normal'\\n    }\\n  },\\n  paddings: {\\n    xxSmall: 1,\\n    xSmall: 2,\\n    small: 5,\\n    normal: 7,\\n    medium: 10,\\n    large: 15,\\n    xLarge: 20,\\n    xxLarge: 25,\\n    xxxLarge: 30,\\n    xxxxLarge: 35,\\n    xxxxxLarge: 40\\n  },\\n  borders: {\\n    size: {\\n      thin: 1,\\n      normal: 2,\\n      bold: 3\\n    },\\n    color: {\\n      extraLight: 'rgba(0,0,0,0.05)',\\n      light: 'rgba(0,0,0,0.1)',\\n      normal: 'rgba(0,0,0,0.3)',\\n      dark: 'rgba(0,0,0,0.5)',\\n      lightGray: '#e5e5e5'\\n    },\\n    radius: {\\n      small: 3,\\n      normal: 5,\\n      large: 10,\\n      xLarge: 18,\\n      xxLarge: 21\\n    }\\n  },\\n  inputs: {\\n    radius: 25,\\n    fontSize: 14,\\n    placeholderColor: 'rgba(0,0,0,0.22)',\\n    borderColor: 'rgba(0,0,0,0.22)',\\n    borderColorActive: '#33a8ff',\\n    color: 'rgba(0, 0, 0)',\\n    padding: {\\n      top: 12,\\n      bottom: 12,\\n      left: 15,\\n      right: 15\\n    },\\n    borderWidth: 1\\n  },\\n  buttons: {\\n    radius: 5,\\n    fontSize: 16,\\n    padding: 12,\\n    border: 1,\\n    // Only applicable in the inverted state\\n    disabled: {\\n      backgroundColor: {\\n        normal: '#999999',\\n        inverted: '#cccccc'\\n      }\\n    }\\n  }\\n}\",\n        \"computed\": false\n      },\n      \"required\": false\n    }\n  }\n};",{"version":3,"sources":["LinearLayout.jsx"],"names":[],"mappings":";;;;;;;;;;;;;AAsF+C,OAAA,KAAA,MAAA,OAAA","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport injectElementBetweenChildElements from '~/core/utils/jsHelpers/injectElementBetweenChildElements';\nimport { boxColorsStyles } from '~/coreUI/utils/infereStyle';\nimport spaceStyles from '~/coreUI/utils/styleSystem';\nimport withMedia from '~/core/utils/mediaHelpers/withMedia';\n\nimport Spacer from './Spacer';\n\nconst getIntraItemsSpacer = (props) => {\n  let sizeProp = null;\n  // eslint-disable-next-line react/prop-types\n  sizeProp = props.spaceBetween ? parseFloat(props.spaceBetween) : null;\n  if (!sizeProp) {\n    return null;\n  }\n  return <Spacer size={sizeProp} />;\n};\n\nconst getBorderColor = (props) => {\n  let color = 'light';\n  if (props.borderColor) {\n    color = props.borderColor;\n  }\n\n  return props.theme.borders.color[color] || props.borderColor;\n};\n\nconst getBorderWeight = (props) => {\n  let weight = 'thin';\n  if (props.borderWeight) {\n    weight = props.borderWeight;\n  }\n\n  return props.theme.borders.size[weight];\n};\n\nconst getBorderRadius = (props) => {\n  let radius = 'normal';\n  if (props.borderRadius) {\n    radius = props.borderRadius;\n  }\n\n  return props.theme.borders.radius[radius] || radius;\n};\n\nconst getJustifyContent = (props) => {\n  if (props.spaceEvenlyJustified) {\n    return 'space-evenly';\n  } else if (props.spaceAroundJustified) {\n    return 'space-around';\n  } else if (props.spaceBetweenJustified) {\n    return 'space-between';\n  } else if (props.stretchJustified) {\n    return 'stretch';\n  } else if (props.topJustified) {\n    return 'flex-start';\n  } else if (props.centerJustified) {\n    return 'center';\n  } else if (props.bottomJustified) {\n    return 'flex-end';\n  } else if (props.leftJustified) {\n    return 'flex-start';\n  } else if (props.rightJustified) {\n    return 'flex-end';\n  }\n  return null;\n};\n\nconst getAlignItems = (props) => {\n  if (props.stretchAligned) {\n    return 'stretch';\n  } else if (props.centerAligned) {\n    return 'center';\n  } else if (props.topAligned) {\n    return 'flex-start';\n  } else if (props.bottomAligned) {\n    return 'flex-end';\n  } else if (props.leftAligned) {\n    return 'flex-start';\n  } else if (props.rightAligned) {\n    return 'flex-end';\n  }\n  return null;\n};\n\nconst StyledLinearLayout = withMedia(styled.div`\n  width: ${props => (props.fullWidth ? '100%' : props.width)};\n  height: ${props => (props.fullHeight ? '100%' : props.height)};\n  box-sizing: border-box;\n\n  display: flex;\n  flex-direction: ${props => (props.row ? 'row' : 'column')};\n  flex-grow: ${props => (props.grow ? 1 : null)};\n  justify-content: ${props => getJustifyContent(props) || 'flex-start'};\n  align-items: ${props => getAlignItems(props) || 'center'};\n\n  border: ${props => props.bordered && `solid ${getBorderWeight(props)}px ${getBorderColor(props)}`};\n  border-radius: ${props => getBorderRadius(props)}px;\n  border-top: ${props => props.topBordered && `solid ${getBorderWeight(props)}px ${getBorderColor(props)}`};\n  border-left: ${props => props.leftBordered && `solid ${getBorderWeight(props)}px ${getBorderColor(props)}`};\n  border-bottom: ${props => props.bottomBordered && `solid ${getBorderWeight(props)}px ${getBorderColor(props)}`};\n  border-right: ${props => props.rightBordered && `solid ${getBorderWeight(props)}px ${getBorderColor(props)}`};\n\n  padding: ${props => props.padding * props.theme.new.spacer}px;\n  padding-left: ${props => props.paddingLeft * props.theme.new.spacer}px;\n  padding-right: ${props => props.paddingRight * props.theme.new.spacer}px;\n  padding-top: ${props => props.paddingTop * props.theme.new.spacer}px;\n  padding-bottom: ${props => props.paddingBottom * props.theme.new.spacer}px;\n\n  ${props => spaceStyles(props)}\n  ${props => boxColorsStyles(props)}\n  ${props => props.customStyles && props.customStyles(props)}\n`);\n\nexport const LinearLayout = props => (\n  <StyledLinearLayout {...props}>\n    {injectElementBetweenChildElements(\n      props.children, // eslint-disable-line react/prop-types\n      getIntraItemsSpacer(props),\n      true,\n    )}\n  </StyledLinearLayout>\n);\n\nexport const Column = props => (\n  <LinearLayout column {...props} />\n);\n\nexport const Row = props => (\n  <LinearLayout row {...props} />\n);\n\nexport const Box = props => (\n  <LinearLayout {...props} />\n);\n"]}]}